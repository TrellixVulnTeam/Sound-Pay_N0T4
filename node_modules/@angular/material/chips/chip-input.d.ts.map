<<<<<<< HEAD
{"version":3,"file":"chip-input.d.ts","sources":["chip-input.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { AfterContentInit, ElementRef, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport { MatChipsDefaultOptions } from './chip-default-options';\nimport { MatChipList } from './chip-list';\nimport { MatChipTextControl } from './chip-text-control';\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n    /**\n     * The native `<input>` element that the event is being fired for.\n     * @deprecated Use `MatChipInputEvent#chipInput.inputElement` instead.\n     * @breaking-change 13.0.0 This property will be removed.\n     */\n    input: HTMLInputElement;\n    /** The value of the input. */\n    value: string;\n    /**\n     * Reference to the chip input that emitted the event.\n     * @breaking-change 13.0.0 This property will be made required.\n     */\n    chipInput?: MatChipInput;\n}\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nexport declare class MatChipInput implements MatChipTextControl, OnChanges, OnDestroy, AfterContentInit {\n    protected _elementRef: ElementRef<HTMLInputElement>;\n    private _defaultOptions;\n    /** Used to prevent focus moving to chips while user is holding backspace */\n    private _focusLastChipOnBackspace;\n    /** Whether the control is focused. */\n    focused: boolean;\n    _chipList: MatChipList;\n    /** Register input for chip list */\n    set chipList(value: MatChipList);\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur(): boolean;\n    set addOnBlur(value: boolean);\n    _addOnBlur: boolean;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n    separatorKeyCodes: readonly number[] | ReadonlySet<number>;\n    /** Emitted when a chip is to be added. */\n    readonly chipEnd: EventEmitter<MatChipInputEvent>;\n    /** The input's placeholder text. */\n    placeholder: string;\n    /** Unique id for the input. */\n    id: string;\n    /** Whether the input is disabled. */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    private _disabled;\n    /** Whether the input is empty. */\n    get empty(): boolean;\n    /** The native input element to which this directive is attached. */\n    readonly inputElement: HTMLInputElement;\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _defaultOptions: MatChipsDefaultOptions);\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngAfterContentInit(): void;\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event?: KeyboardEvent): void;\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event: KeyboardEvent): void;\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur(): void;\n    _focus(): void;\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event?: KeyboardEvent): void;\n    _onInput(): void;\n    /** Focuses the input. */\n    focus(options?: FocusOptions): void;\n    /** Clears the input */\n    clear(): void;\n    /** Checks whether a keycode is one of the configured separators. */\n    private _isSeparatorKey;\n    static ngAcceptInputType_addOnBlur: BooleanInput;\n    static ngAcceptInputType_disabled: BooleanInput;\n}\n"]}
=======
{"version":3,"file":"chip-input.d.ts","sources":["chip-input.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { AfterContentInit, ElementRef, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\r\nimport { MatChipsDefaultOptions } from './chip-default-options';\r\nimport { MatChipList } from './chip-list';\r\nimport { MatChipTextControl } from './chip-text-control';\r\n/** Represents an input event on a `matChipInput`. */\r\nexport interface MatChipInputEvent {\r\n    /**\r\n     * The native `<input>` element that the event is being fired for.\r\n     * @deprecated Use `MatChipInputEvent#chipInput.inputElement` instead.\r\n     * @breaking-change 13.0.0 This property will be removed.\r\n     */\r\n    input: HTMLInputElement;\r\n    /** The value of the input. */\r\n    value: string;\r\n    /**\r\n     * Reference to the chip input that emitted the event.\r\n     * @breaking-change 13.0.0 This property will be made required.\r\n     */\r\n    chipInput?: MatChipInput;\r\n}\r\n/**\r\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\r\n * May be placed inside or outside of an `<mat-chip-list>`.\r\n */\r\nexport declare class MatChipInput implements MatChipTextControl, OnChanges, OnDestroy, AfterContentInit {\r\n    protected _elementRef: ElementRef<HTMLInputElement>;\r\n    private _defaultOptions;\r\n    /** Used to prevent focus moving to chips while user is holding backspace */\r\n    private _focusLastChipOnBackspace;\r\n    /** Whether the control is focused. */\r\n    focused: boolean;\r\n    _chipList: MatChipList;\r\n    /** Register input for chip list */\r\n    set chipList(value: MatChipList);\r\n    /**\r\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\r\n     */\r\n    get addOnBlur(): boolean;\r\n    set addOnBlur(value: boolean);\r\n    _addOnBlur: boolean;\r\n    /**\r\n     * The list of key codes that will trigger a chipEnd event.\r\n     *\r\n     * Defaults to `[ENTER]`.\r\n     */\r\n    separatorKeyCodes: readonly number[] | ReadonlySet<number>;\r\n    /** Emitted when a chip is to be added. */\r\n    readonly chipEnd: EventEmitter<MatChipInputEvent>;\r\n    /** The input's placeholder text. */\r\n    placeholder: string;\r\n    /** Unique id for the input. */\r\n    id: string;\r\n    /** Whether the input is disabled. */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    private _disabled;\r\n    /** Whether the input is empty. */\r\n    get empty(): boolean;\r\n    /** The native input element to which this directive is attached. */\r\n    readonly inputElement: HTMLInputElement;\r\n    constructor(_elementRef: ElementRef<HTMLInputElement>, _defaultOptions: MatChipsDefaultOptions);\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n    ngAfterContentInit(): void;\r\n    /** Utility method to make host definition/tests more clear. */\r\n    _keydown(event?: KeyboardEvent): void;\r\n    /**\r\n     * Pass events to the keyboard manager. Available here for tests.\r\n     */\r\n    _keyup(event: KeyboardEvent): void;\r\n    /** Checks to see if the blur should emit the (chipEnd) event. */\r\n    _blur(): void;\r\n    _focus(): void;\r\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\r\n    _emitChipEnd(event?: KeyboardEvent): void;\r\n    _onInput(): void;\r\n    /** Focuses the input. */\r\n    focus(options?: FocusOptions): void;\r\n    /** Clears the input */\r\n    clear(): void;\r\n    /** Checks whether a keycode is one of the configured separators. */\r\n    private _isSeparatorKey;\r\n    static ngAcceptInputType_addOnBlur: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
