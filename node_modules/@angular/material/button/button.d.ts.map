<<<<<<< HEAD
{"version":3,"file":"button.d.ts","sources":["button.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\nimport { CanColor, CanDisable, CanDisableRipple, MatRipple } from '@angular/material/core';\ndeclare const _MatButtonBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisableRipple> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisableRipple> & {\n    new (_elementRef: ElementRef): {\n        _elementRef: ElementRef;\n    };\n};\n/**\n * Material design button.\n */\nexport declare class MatButton extends _MatButtonBase implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\n    private _focusMonitor;\n    _animationMode: string;\n    /** Whether the button is round. */\n    readonly isRoundButton: boolean;\n    /** Whether the button is icon button. */\n    readonly isIconButton: boolean;\n    /** Reference to the MatRipple instance of the button. */\n    ripple: MatRipple;\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _animationMode: string);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the button. */\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    _getHostElement(): any;\n    _isRippleDisabled(): boolean;\n    /** Gets whether the button has one of the given attributes. */\n    _hasHostAttributes(...attributes: string[]): boolean;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\n/**\n * Material design anchor button.\n */\nexport declare class MatAnchor extends MatButton {\n    /** Tabindex of the button. */\n    tabIndex: number;\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef, animationMode: string);\n    _haltDisabledEvents(event: Event): void;\n}\nexport {};\n"]}
=======
{"version":3,"file":"button.d.ts","sources":["button.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor, FocusableOption, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, OnDestroy, AfterViewInit } from '@angular/core';\r\nimport { CanColor, CanDisable, CanDisableRipple, MatRipple } from '@angular/material/core';\r\ndeclare const _MatButtonBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisableRipple> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisableRipple> & {\r\n    new (_elementRef: ElementRef): {\r\n        _elementRef: ElementRef;\r\n    };\r\n};\r\n/**\r\n * Material design button.\r\n */\r\nexport declare class MatButton extends _MatButtonBase implements AfterViewInit, OnDestroy, CanDisable, CanColor, CanDisableRipple, FocusableOption {\r\n    private _focusMonitor;\r\n    _animationMode: string;\r\n    /** Whether the button is round. */\r\n    readonly isRoundButton: boolean;\r\n    /** Whether the button is icon button. */\r\n    readonly isIconButton: boolean;\r\n    /** Reference to the MatRipple instance of the button. */\r\n    ripple: MatRipple;\r\n    constructor(elementRef: ElementRef, _focusMonitor: FocusMonitor, _animationMode: string);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Focuses the button. */\r\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\r\n    _getHostElement(): any;\r\n    _isRippleDisabled(): boolean;\r\n    /** Gets whether the button has one of the given attributes. */\r\n    _hasHostAttributes(...attributes: string[]): boolean;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\n/**\r\n * Material design anchor button.\r\n */\r\nexport declare class MatAnchor extends MatButton {\r\n    /** Tabindex of the button. */\r\n    tabIndex: number;\r\n    constructor(focusMonitor: FocusMonitor, elementRef: ElementRef, animationMode: string);\r\n    _haltDisabledEvents(event: Event): void;\r\n}\r\nexport {};\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
