<<<<<<< HEAD
{"version":3,"file":"year-view.d.ts","sources":["year-view.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { MatCalendarBody, MatCalendarCell, MatCalendarUserEvent, MatCalendarCellClassFunction } from './calendar-body';\nimport { DateRange } from './date-selection-model';\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nexport declare class MatYearView<D> implements AfterContentInit, OnDestroy {\n    readonly _changeDetectorRef: ChangeDetectorRef;\n    private _dateFormats;\n    _dateAdapter: DateAdapter<D>;\n    private _dir?;\n    private _rerenderSubscription;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    get activeDate(): D;\n    set activeDate(value: D);\n    private _activeDate;\n    /** The currently selected date. */\n    get selected(): DateRange<D> | D | null;\n    set selected(value: DateRange<D> | D | null);\n    private _selected;\n    /** The minimum selectable date. */\n    get minDate(): D | null;\n    set minDate(value: D | null);\n    private _minDate;\n    /** The maximum selectable date. */\n    get maxDate(): D | null;\n    set maxDate(value: D | null);\n    private _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter: (date: D) => boolean;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass: MatCalendarCellClassFunction<D>;\n    /** Emits when a new month is selected. */\n    readonly selectedChange: EventEmitter<D>;\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    readonly monthSelected: EventEmitter<D>;\n    /** Emits when any date is activated. */\n    readonly activeDateChange: EventEmitter<D>;\n    /** The body of calendar table */\n    _matCalendarBody: MatCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months: MatCalendarCell[][];\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel: string;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth: number | null;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth: number | null;\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Handles when a new month is selected. */\n    _monthSelected(event: MatCalendarUserEvent<number>): void;\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\n    /** Initializes this year view. */\n    _init(): void;\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(): void;\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    private _getMonthInCurrentYear;\n    /** Creates an MatCalendarCell for the given month. */\n    private _createCellForMonth;\n    /** Whether the given month is enabled. */\n    private _shouldEnableMonth;\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    private _isYearAndMonthAfterMaxDate;\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    private _isYearAndMonthBeforeMinDate;\n    /** Determines whether the user has the RTL layout direction. */\n    private _isRtl;\n    /** Sets the currently-selected month based on a model value. */\n    private _setSelectedMonth;\n}\n"]}
=======
{"version":3,"file":"year-view.d.ts","sources":["year-view.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { AfterContentInit, ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { DateAdapter, MatDateFormats } from '@angular/material/core';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { MatCalendarBody, MatCalendarCell, MatCalendarUserEvent, MatCalendarCellClassFunction } from './calendar-body';\r\nimport { DateRange } from './date-selection-model';\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\nexport declare class MatYearView<D> implements AfterContentInit, OnDestroy {\r\n    readonly _changeDetectorRef: ChangeDetectorRef;\r\n    private _dateFormats;\r\n    _dateAdapter: DateAdapter<D>;\r\n    private _dir?;\r\n    private _rerenderSubscription;\r\n    /** The date to display in this year view (everything other than the year is ignored). */\r\n    get activeDate(): D;\r\n    set activeDate(value: D);\r\n    private _activeDate;\r\n    /** The currently selected date. */\r\n    get selected(): DateRange<D> | D | null;\r\n    set selected(value: DateRange<D> | D | null);\r\n    private _selected;\r\n    /** The minimum selectable date. */\r\n    get minDate(): D | null;\r\n    set minDate(value: D | null);\r\n    private _minDate;\r\n    /** The maximum selectable date. */\r\n    get maxDate(): D | null;\r\n    set maxDate(value: D | null);\r\n    private _maxDate;\r\n    /** A function used to filter which dates are selectable. */\r\n    dateFilter: (date: D) => boolean;\r\n    /** Function that can be used to add custom CSS classes to date cells. */\r\n    dateClass: MatCalendarCellClassFunction<D>;\r\n    /** Emits when a new month is selected. */\r\n    readonly selectedChange: EventEmitter<D>;\r\n    /** Emits the selected month. This doesn't imply a change on the selected date */\r\n    readonly monthSelected: EventEmitter<D>;\r\n    /** Emits when any date is activated. */\r\n    readonly activeDateChange: EventEmitter<D>;\r\n    /** The body of calendar table */\r\n    _matCalendarBody: MatCalendarBody;\r\n    /** Grid of calendar cells representing the months of the year. */\r\n    _months: MatCalendarCell[][];\r\n    /** The label for this year (e.g. \"2017\"). */\r\n    _yearLabel: string;\r\n    /** The month in this year that today falls on. Null if today is in a different year. */\r\n    _todayMonth: number | null;\r\n    /**\r\n     * The month in this year that the selected Date falls on.\r\n     * Null if the selected Date is in a different year.\r\n     */\r\n    _selectedMonth: number | null;\r\n    constructor(_changeDetectorRef: ChangeDetectorRef, _dateFormats: MatDateFormats, _dateAdapter: DateAdapter<D>, _dir?: Directionality | undefined);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Handles when a new month is selected. */\r\n    _monthSelected(event: MatCalendarUserEvent<number>): void;\r\n    /** Handles keydown events on the calendar body when calendar is in year view. */\r\n    _handleCalendarBodyKeydown(event: KeyboardEvent): void;\r\n    /** Initializes this year view. */\r\n    _init(): void;\r\n    /** Focuses the active cell after the microtask queue is empty. */\r\n    _focusActiveCell(): void;\r\n    /**\r\n     * Gets the month in this year that the given Date falls on.\r\n     * Returns null if the given Date is in another year.\r\n     */\r\n    private _getMonthInCurrentYear;\r\n    /** Creates an MatCalendarCell for the given month. */\r\n    private _createCellForMonth;\r\n    /** Whether the given month is enabled. */\r\n    private _shouldEnableMonth;\r\n    /**\r\n     * Tests whether the combination month/year is after this.maxDate, considering\r\n     * just the month and year of this.maxDate\r\n     */\r\n    private _isYearAndMonthAfterMaxDate;\r\n    /**\r\n     * Tests whether the combination month/year is before this.minDate, considering\r\n     * just the month and year of this.minDate\r\n     */\r\n    private _isYearAndMonthBeforeMinDate;\r\n    /** Determines whether the user has the RTL layout direction. */\r\n    private _isRtl;\r\n    /** Sets the currently-selected month based on a model value. */\r\n    private _setSelectedMonth;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
