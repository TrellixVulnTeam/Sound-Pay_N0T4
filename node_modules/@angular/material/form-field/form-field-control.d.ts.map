<<<<<<< HEAD
{"version":3,"file":"form-field-control.d.ts","sources":["form-field-control.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Observable } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport declare abstract class MatFormFieldControl<T> {\n    /** The value of the control. */\n    value: T | null;\n    /**\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n     * needs to run change detection.\n     */\n    readonly stateChanges: Observable<void>;\n    /** The element ID for this control. */\n    readonly id: string;\n    /** The placeholder for this control. */\n    readonly placeholder: string;\n    /** Gets the NgControl for this control. */\n    readonly ngControl: NgControl | null;\n    /** Whether the control is focused. */\n    readonly focused: boolean;\n    /** Whether the control is empty. */\n    readonly empty: boolean;\n    /** Whether the `MatFormField` label should try to float. */\n    readonly shouldLabelFloat: boolean;\n    /** Whether the control is required. */\n    readonly required: boolean;\n    /** Whether the control is disabled. */\n    readonly disabled: boolean;\n    /** Whether the control is in an error state. */\n    readonly errorState: boolean;\n    /**\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n     * based on their control type. The form field will add a class,\n     * `mat-form-field-type-{{controlType}}` to its root element.\n     */\n    readonly controlType?: string;\n    /**\n     * Whether the input is currently in an autofilled state. If property is not present on the\n     * control it is assumed to be false.\n     */\n    readonly autofilled?: boolean;\n    /**\n     * Value of `aria-describedby` that should be merged with the described-by ids\n     * which are set by the form-field.\n     */\n    readonly userAriaDescribedBy?: string;\n    /** Sets the list of element IDs that currently describe this control. */\n    abstract setDescribedByIds(ids: string[]): void;\n    /** Handles a click on the control's container. */\n    abstract onContainerClick(event: MouseEvent): void;\n}\n"]}
=======
{"version":3,"file":"form-field-control.d.ts","sources":["form-field-control.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Observable } from 'rxjs';\r\nimport { NgControl } from '@angular/forms';\r\n/** An interface which allows a control to work inside of a `MatFormField`. */\r\nexport declare abstract class MatFormFieldControl<T> {\r\n    /** The value of the control. */\r\n    value: T | null;\r\n    /**\r\n     * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\r\n     * needs to run change detection.\r\n     */\r\n    readonly stateChanges: Observable<void>;\r\n    /** The element ID for this control. */\r\n    readonly id: string;\r\n    /** The placeholder for this control. */\r\n    readonly placeholder: string;\r\n    /** Gets the NgControl for this control. */\r\n    readonly ngControl: NgControl | null;\r\n    /** Whether the control is focused. */\r\n    readonly focused: boolean;\r\n    /** Whether the control is empty. */\r\n    readonly empty: boolean;\r\n    /** Whether the `MatFormField` label should try to float. */\r\n    readonly shouldLabelFloat: boolean;\r\n    /** Whether the control is required. */\r\n    readonly required: boolean;\r\n    /** Whether the control is disabled. */\r\n    readonly disabled: boolean;\r\n    /** Whether the control is in an error state. */\r\n    readonly errorState: boolean;\r\n    /**\r\n     * An optional name for the control type that can be used to distinguish `mat-form-field` elements\r\n     * based on their control type. The form field will add a class,\r\n     * `mat-form-field-type-{{controlType}}` to its root element.\r\n     */\r\n    readonly controlType?: string;\r\n    /**\r\n     * Whether the input is currently in an autofilled state. If property is not present on the\r\n     * control it is assumed to be false.\r\n     */\r\n    readonly autofilled?: boolean;\r\n    /**\r\n     * Value of `aria-describedby` that should be merged with the described-by ids\r\n     * which are set by the form-field.\r\n     */\r\n    readonly userAriaDescribedBy?: string;\r\n    /** Sets the list of element IDs that currently describe this control. */\r\n    abstract setDescribedByIds(ids: string[]): void;\r\n    /** Handles a click on the control's container. */\r\n    abstract onContainerClick(event: MouseEvent): void;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
