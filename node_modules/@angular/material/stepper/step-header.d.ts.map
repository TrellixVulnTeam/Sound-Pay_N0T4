<<<<<<< HEAD
{"version":3,"file":"step-header.d.ts","sources":["step-header.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { ChangeDetectorRef, ElementRef, OnDestroy, TemplateRef, AfterViewInit } from '@angular/core';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIntl } from './stepper-intl';\nimport { MatStepperIconContext } from './stepper-icon';\nimport { StepState } from '@angular/cdk/stepper';\nimport { CanColor } from '@angular/material/core';\n/** @docs-private */\ndeclare const _MatStepHeaderBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanColor> & {\n    new (elementRef: ElementRef): {\n        _elementRef: ElementRef<HTMLElement>;\n        focus(): void;\n    };\n};\nexport declare class MatStepHeader extends _MatStepHeaderBase implements AfterViewInit, OnDestroy, CanColor {\n    _intl: MatStepperIntl;\n    private _focusMonitor;\n    private _intlSubscription;\n    /** State of the given step. */\n    state: StepState;\n    /** Label of the given step. */\n    label: MatStepLabel | string;\n    /** Error message to display when there's an error. */\n    errorMessage: string;\n    /** Overrides for the header icons, passed in via the stepper. */\n    iconOverrides: {\n        [key: string]: TemplateRef<MatStepperIconContext>;\n    };\n    /** Index of the given step. */\n    index: number;\n    /** Whether the given step is selected. */\n    selected: boolean;\n    /** Whether the given step label is active. */\n    active: boolean;\n    /** Whether the given step is optional. */\n    optional: boolean;\n    /** Whether the ripple should be disabled. */\n    disableRipple: boolean;\n    constructor(_intl: MatStepperIntl, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Focuses the step header. */\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    /** Returns string label of given step if it is a text label. */\n    _stringLabel(): string | null;\n    /** Returns MatStepLabel if the label of given step is a template label. */\n    _templateLabel(): MatStepLabel | null;\n    /** Returns the host HTML element. */\n    _getHostElement(): HTMLElement;\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\n    _getIconContext(): MatStepperIconContext;\n    _getDefaultTextForState(state: StepState): string;\n}\nexport {};\n"]}
=======
{"version":3,"file":"step-header.d.ts","sources":["step-header.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { ChangeDetectorRef, ElementRef, OnDestroy, TemplateRef, AfterViewInit } from '@angular/core';\r\nimport { MatStepLabel } from './step-label';\r\nimport { MatStepperIntl } from './stepper-intl';\r\nimport { MatStepperIconContext } from './stepper-icon';\r\nimport { StepState } from '@angular/cdk/stepper';\r\nimport { CanColor } from '@angular/material/core';\r\n/** @docs-private */\r\ndeclare const _MatStepHeaderBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanColor> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanColor> & {\r\n    new (elementRef: ElementRef): {\r\n        _elementRef: ElementRef<HTMLElement>;\r\n        focus(): void;\r\n    };\r\n};\r\nexport declare class MatStepHeader extends _MatStepHeaderBase implements AfterViewInit, OnDestroy, CanColor {\r\n    _intl: MatStepperIntl;\r\n    private _focusMonitor;\r\n    private _intlSubscription;\r\n    /** State of the given step. */\r\n    state: StepState;\r\n    /** Label of the given step. */\r\n    label: MatStepLabel | string;\r\n    /** Error message to display when there's an error. */\r\n    errorMessage: string;\r\n    /** Overrides for the header icons, passed in via the stepper. */\r\n    iconOverrides: {\r\n        [key: string]: TemplateRef<MatStepperIconContext>;\r\n    };\r\n    /** Index of the given step. */\r\n    index: number;\r\n    /** Whether the given step is selected. */\r\n    selected: boolean;\r\n    /** Whether the given step label is active. */\r\n    active: boolean;\r\n    /** Whether the given step is optional. */\r\n    optional: boolean;\r\n    /** Whether the ripple should be disabled. */\r\n    disableRipple: boolean;\r\n    constructor(_intl: MatStepperIntl, _focusMonitor: FocusMonitor, _elementRef: ElementRef<HTMLElement>, changeDetectorRef: ChangeDetectorRef);\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Focuses the step header. */\r\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\r\n    /** Returns string label of given step if it is a text label. */\r\n    _stringLabel(): string | null;\r\n    /** Returns MatStepLabel if the label of given step is a template label. */\r\n    _templateLabel(): MatStepLabel | null;\r\n    /** Returns the host HTML element. */\r\n    _getHostElement(): HTMLElement;\r\n    /** Template context variables that are exposed to the `matStepperIcon` instances. */\r\n    _getIconContext(): MatStepperIconContext;\r\n    _getDefaultTextForState(state: StepState): string;\r\n}\r\nexport {};\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
