<<<<<<< HEAD
{"version":3,"file":"stepper.d.ts","sources":["stepper.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Directionality } from '@angular/cdk/bidi';\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\nimport { AnimationEvent } from '@angular/animations';\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\nimport { ErrorStateMatcher, ThemePalette } from '@angular/material/core';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Subject } from 'rxjs';\nimport { MatStepHeader } from './step-header';\nimport { MatStepLabel } from './step-label';\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\nimport { MatStepContent } from './step-content';\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher, AfterContentInit, OnDestroy {\n    private _errorStateMatcher;\n    private _viewContainerRef;\n    private _isSelected;\n    /** Content for step label given by `<ng-template matStepLabel>`. */\n    stepLabel: MatStepLabel;\n    /** Theme color for the particular step. */\n    color: ThemePalette;\n    /** Content that will be rendered lazily. */\n    _lazyContent: MatStepContent;\n    /** Currently-attached portal containing the lazy content. */\n    _portal: TemplatePortal;\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, _viewContainerRef: ViewContainerRef, stepperOptions?: StepperOptions);\n    ngAfterContentInit(): void;\n    ngOnDestroy(): void;\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\n}\n/**\n * Proxies the public APIs from `MatStepper` to the deprecated `MatHorizontalStepper` and\n * `MatVerticalStepper`.\n * @deprecated Use `MatStepper` instead.\n * @breaking-change 13.0.0\n * @docs-private\n */\ndeclare abstract class _MatProxyStepperBase extends CdkStepper {\n    readonly steps: QueryList<MatStep>;\n    readonly animationDone: EventEmitter<void>;\n    disableRipple: boolean;\n    color: ThemePalette;\n    labelPosition: 'bottom' | 'end';\n}\n/**\n * @deprecated Use `MatStepper` instead.\n * @breaking-change 13.0.0\n */\nexport declare class MatHorizontalStepper extends _MatProxyStepperBase {\n}\n/**\n * @deprecated Use `MatStepper` instead.\n * @breaking-change 13.0.0\n */\nexport declare class MatVerticalStepper extends _MatProxyStepperBase {\n}\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\n    /** The list of step headers of the steps in the stepper. */\n    _stepHeader: QueryList<MatStepHeader>;\n    /** Full list of steps inside the stepper, including inside nested steppers. */\n    _steps: QueryList<MatStep>;\n    /** Steps that belong to the current stepper, excluding ones from nested steppers. */\n    readonly steps: QueryList<MatStep>;\n    /** Custom icon overrides passed in by the consumer. */\n    _icons: QueryList<MatStepperIcon>;\n    /** Event emitted when the current step is done transitioning in. */\n    readonly animationDone: EventEmitter<void>;\n    /** Whether ripples should be disabled for the step headers. */\n    disableRipple: boolean;\n    /** Theme color for all of the steps in stepper. */\n    color: ThemePalette;\n    /**\n     * Whether the label should display in bottom or end position.\n     * Only applies in the `horizontal` orientation.\n     */\n    labelPosition: 'bottom' | 'end';\n    /** Consumer-specified template-refs to be used to override the header icons. */\n    _iconOverrides: Record<string, TemplateRef<MatStepperIconContext>>;\n    /** Stream of animation `done` events when the body expands/collapses. */\n    readonly _animationDone: Subject<AnimationEvent>;\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, _document: any);\n    ngAfterContentInit(): void;\n    _stepIsNavigable(index: number, step: MatStep): boolean;\n}\nexport {};\n"]}
=======
{"version":3,"file":"stepper.d.ts","sources":["stepper.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { CdkStep, CdkStepper, StepperOptions } from '@angular/cdk/stepper';\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, QueryList, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { FormControl, FormGroupDirective, NgForm } from '@angular/forms';\r\nimport { ErrorStateMatcher, ThemePalette } from '@angular/material/core';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { Subject } from 'rxjs';\r\nimport { MatStepHeader } from './step-header';\r\nimport { MatStepLabel } from './step-label';\r\nimport { MatStepperIcon, MatStepperIconContext } from './stepper-icon';\r\nimport { MatStepContent } from './step-content';\r\nexport declare class MatStep extends CdkStep implements ErrorStateMatcher, AfterContentInit, OnDestroy {\r\n    private _errorStateMatcher;\r\n    private _viewContainerRef;\r\n    private _isSelected;\r\n    /** Content for step label given by `<ng-template matStepLabel>`. */\r\n    stepLabel: MatStepLabel;\r\n    /** Theme color for the particular step. */\r\n    color: ThemePalette;\r\n    /** Content that will be rendered lazily. */\r\n    _lazyContent: MatStepContent;\r\n    /** Currently-attached portal containing the lazy content. */\r\n    _portal: TemplatePortal;\r\n    constructor(stepper: MatStepper, _errorStateMatcher: ErrorStateMatcher, _viewContainerRef: ViewContainerRef, stepperOptions?: StepperOptions);\r\n    ngAfterContentInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Custom error state matcher that additionally checks for validity of interacted form. */\r\n    isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean;\r\n}\r\n/**\r\n * Proxies the public APIs from `MatStepper` to the deprecated `MatHorizontalStepper` and\r\n * `MatVerticalStepper`.\r\n * @deprecated Use `MatStepper` instead.\r\n * @breaking-change 13.0.0\r\n * @docs-private\r\n */\r\ndeclare abstract class _MatProxyStepperBase extends CdkStepper {\r\n    readonly steps: QueryList<MatStep>;\r\n    readonly animationDone: EventEmitter<void>;\r\n    disableRipple: boolean;\r\n    color: ThemePalette;\r\n    labelPosition: 'bottom' | 'end';\r\n}\r\n/**\r\n * @deprecated Use `MatStepper` instead.\r\n * @breaking-change 13.0.0\r\n */\r\nexport declare class MatHorizontalStepper extends _MatProxyStepperBase {\r\n}\r\n/**\r\n * @deprecated Use `MatStepper` instead.\r\n * @breaking-change 13.0.0\r\n */\r\nexport declare class MatVerticalStepper extends _MatProxyStepperBase {\r\n}\r\nexport declare class MatStepper extends CdkStepper implements AfterContentInit {\r\n    /** The list of step headers of the steps in the stepper. */\r\n    _stepHeader: QueryList<MatStepHeader>;\r\n    /** Full list of steps inside the stepper, including inside nested steppers. */\r\n    _steps: QueryList<MatStep>;\r\n    /** Steps that belong to the current stepper, excluding ones from nested steppers. */\r\n    readonly steps: QueryList<MatStep>;\r\n    /** Custom icon overrides passed in by the consumer. */\r\n    _icons: QueryList<MatStepperIcon>;\r\n    /** Event emitted when the current step is done transitioning in. */\r\n    readonly animationDone: EventEmitter<void>;\r\n    /** Whether ripples should be disabled for the step headers. */\r\n    disableRipple: boolean;\r\n    /** Theme color for all of the steps in stepper. */\r\n    color: ThemePalette;\r\n    /**\r\n     * Whether the label should display in bottom or end position.\r\n     * Only applies in the `horizontal` orientation.\r\n     */\r\n    labelPosition: 'bottom' | 'end';\r\n    /** Consumer-specified template-refs to be used to override the header icons. */\r\n    _iconOverrides: Record<string, TemplateRef<MatStepperIconContext>>;\r\n    /** Stream of animation `done` events when the body expands/collapses. */\r\n    readonly _animationDone: Subject<AnimationEvent>;\r\n    constructor(dir: Directionality, changeDetectorRef: ChangeDetectorRef, elementRef: ElementRef<HTMLElement>, _document: any);\r\n    ngAfterContentInit(): void;\r\n    _stepIsNavigable(index: number, step: MatStep): boolean;\r\n}\r\nexport {};\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
