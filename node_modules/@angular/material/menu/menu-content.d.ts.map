<<<<<<< HEAD
{"version":3,"file":"menu-content.d.ts","sources":["menu-content.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, InjectionToken, Injector, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\nimport { Subject } from 'rxjs';\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport declare const MAT_MENU_CONTENT: InjectionToken<MatMenuContent>;\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nexport declare class MatMenuContent implements OnDestroy {\n    private _template;\n    private _componentFactoryResolver;\n    private _appRef;\n    private _injector;\n    private _viewContainerRef;\n    private _document;\n    private _changeDetectorRef?;\n    private _portal;\n    private _outlet;\n    /** Emits when the menu content has been attached. */\n    readonly _attached: Subject<void>;\n    constructor(_template: TemplateRef<any>, _componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _injector: Injector, _viewContainerRef: ViewContainerRef, _document: any, _changeDetectorRef?: ChangeDetectorRef | undefined);\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context?: any): void;\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach(): void;\n    ngOnDestroy(): void;\n}\n"]}
=======
{"version":3,"file":"menu-content.d.ts","sources":["menu-content.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ApplicationRef, ChangeDetectorRef, ComponentFactoryResolver, InjectionToken, Injector, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n/**\r\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\r\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\r\n * retention of the class and its directive metadata.\r\n */\r\nexport declare const MAT_MENU_CONTENT: InjectionToken<MatMenuContent>;\r\n/**\r\n * Menu content that will be rendered lazily once the menu is opened.\r\n */\r\nexport declare class MatMenuContent implements OnDestroy {\r\n    private _template;\r\n    private _componentFactoryResolver;\r\n    private _appRef;\r\n    private _injector;\r\n    private _viewContainerRef;\r\n    private _document;\r\n    private _changeDetectorRef?;\r\n    private _portal;\r\n    private _outlet;\r\n    /** Emits when the menu content has been attached. */\r\n    readonly _attached: Subject<void>;\r\n    constructor(_template: TemplateRef<any>, _componentFactoryResolver: ComponentFactoryResolver, _appRef: ApplicationRef, _injector: Injector, _viewContainerRef: ViewContainerRef, _document: any, _changeDetectorRef?: ChangeDetectorRef | undefined);\r\n    /**\r\n     * Attaches the content with a particular context.\r\n     * @docs-private\r\n     */\r\n    attach(context?: any): void;\r\n    /**\r\n     * Detaches the content.\r\n     * @docs-private\r\n     */\r\n    detach(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
