<<<<<<< HEAD
{"version":3,"file":"menu-item.d.ts","sources":["menu-item.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { ElementRef, OnDestroy, AfterViewInit, ChangeDetectorRef } from '@angular/core';\nimport { CanDisable, CanDisableRipple } from '@angular/material/core';\nimport { Subject } from 'rxjs';\nimport { MatMenuPanel } from './menu-panel';\n/** @docs-private */\ndeclare const _MatMenuItemBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisableRipple> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisableRipple> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisable> & {\n    new (): {};\n};\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nexport declare class MatMenuItem extends _MatMenuItemBase implements FocusableOption, CanDisable, CanDisableRipple, AfterViewInit, OnDestroy {\n    private _elementRef;\n    private _focusMonitor?;\n    _parentMenu?: MatMenuPanel<MatMenuItem> | undefined;\n    /**\n     * @deprecated `_changeDetectorRef` to become a required parameter.\n     * @breaking-change 14.0.0\n     */\n    private _changeDetectorRef?;\n    /** ARIA role for the menu item. */\n    role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox';\n    /** Stream that emits when the menu item is hovered. */\n    readonly _hovered: Subject<MatMenuItem>;\n    /** Stream that emits when the menu item is focused. */\n    readonly _focused: Subject<MatMenuItem>;\n    /** Whether the menu item is highlighted. */\n    _highlighted: boolean;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu: boolean;\n    constructor(_elementRef: ElementRef<HTMLElement>, \n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined, \n    /**\n     * @deprecated `_changeDetectorRef` to become a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _changeDetectorRef?: ChangeDetectorRef | undefined);\n    /** Focuses the menu item. */\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    /** Used to set the `tabindex`. */\n    _getTabIndex(): string;\n    /** Returns the host DOM element. */\n    _getHostElement(): HTMLElement;\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event: Event): void;\n    /** Emits to the hover stream. */\n    _handleMouseEnter(): void;\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel(): string;\n    _setHighlighted(isHighlighted: boolean): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_disableRipple: BooleanInput;\n}\nexport {};\n"]}
=======
{"version":3,"file":"menu-item.d.ts","sources":["menu-item.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { FocusableOption, FocusMonitor, FocusOrigin } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, OnDestroy, AfterViewInit, ChangeDetectorRef } from '@angular/core';\r\nimport { CanDisable, CanDisableRipple } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatMenuPanel } from './menu-panel';\r\n/** @docs-private */\r\ndeclare const _MatMenuItemBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisableRipple> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisableRipple> & import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanDisable> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanDisable> & {\r\n    new (): {};\r\n};\r\n/**\r\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\r\n */\r\nexport declare class MatMenuItem extends _MatMenuItemBase implements FocusableOption, CanDisable, CanDisableRipple, AfterViewInit, OnDestroy {\r\n    private _elementRef;\r\n    private _focusMonitor?;\r\n    _parentMenu?: MatMenuPanel<MatMenuItem> | undefined;\r\n    /**\r\n     * @deprecated `_changeDetectorRef` to become a required parameter.\r\n     * @breaking-change 14.0.0\r\n     */\r\n    private _changeDetectorRef?;\r\n    /** ARIA role for the menu item. */\r\n    role: 'menuitem' | 'menuitemradio' | 'menuitemcheckbox';\r\n    /** Stream that emits when the menu item is hovered. */\r\n    readonly _hovered: Subject<MatMenuItem>;\r\n    /** Stream that emits when the menu item is focused. */\r\n    readonly _focused: Subject<MatMenuItem>;\r\n    /** Whether the menu item is highlighted. */\r\n    _highlighted: boolean;\r\n    /** Whether the menu item acts as a trigger for a sub-menu. */\r\n    _triggersSubmenu: boolean;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, \r\n    /**\r\n     * @deprecated `_document` parameter is no longer being used and will be removed.\r\n     * @breaking-change 12.0.0\r\n     */\r\n    _document?: any, _focusMonitor?: FocusMonitor | undefined, _parentMenu?: MatMenuPanel<MatMenuItem> | undefined, \r\n    /**\r\n     * @deprecated `_changeDetectorRef` to become a required parameter.\r\n     * @breaking-change 14.0.0\r\n     */\r\n    _changeDetectorRef?: ChangeDetectorRef | undefined);\r\n    /** Focuses the menu item. */\r\n    focus(origin?: FocusOrigin, options?: FocusOptions): void;\r\n    ngAfterViewInit(): void;\r\n    ngOnDestroy(): void;\r\n    /** Used to set the `tabindex`. */\r\n    _getTabIndex(): string;\r\n    /** Returns the host DOM element. */\r\n    _getHostElement(): HTMLElement;\r\n    /** Prevents the default element actions if it is disabled. */\r\n    _checkDisabled(event: Event): void;\r\n    /** Emits to the hover stream. */\r\n    _handleMouseEnter(): void;\r\n    /** Gets the label to be used when determining whether the option should be focused. */\r\n    getLabel(): string;\r\n    _setHighlighted(isHighlighted: boolean): void;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_disableRipple: BooleanInput;\r\n}\r\nexport {};\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
