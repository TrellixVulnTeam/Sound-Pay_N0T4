<<<<<<< HEAD
{"version":3,"file":"icon-registry.d.ts","sources":["icon-registry.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { HttpClient } from '@angular/common/http';\nimport { ErrorHandler, Optional, OnDestroy } from '@angular/core';\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport declare function getMatIconNameNotFoundError(iconName: string): Error;\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/common/http.\n * @docs-private\n */\nexport declare function getMatIconNoHttpProviderError(): Error;\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport declare function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\nexport interface IconOptions {\n    /** View box to set on the icon. */\n    viewBox?: string;\n    /** Whether or not to fetch the icon or icon set using HTTP credentials. */\n    withCredentials?: boolean;\n}\n/**\n * Function that will be invoked by the icon registry when trying to resolve the\n * URL from which to fetch an icon. The returned URL will be used to make a request for the icon.\n */\nexport declare type IconResolver = (name: string, namespace: string) => (SafeResourceUrl | SafeResourceUrlWithIconOptions | null);\n/** Object that specifies a URL from which to fetch an icon and the options to use for it. */\nexport interface SafeResourceUrlWithIconOptions {\n    url: SafeResourceUrl;\n    options: IconOptions;\n}\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\nexport declare class MatIconRegistry implements OnDestroy {\n    private _httpClient;\n    private _sanitizer;\n    private readonly _errorHandler;\n    private _document;\n    /**\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n     */\n    private _svgIconConfigs;\n    /**\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n     * Multiple icon sets can be registered under the same namespace.\n     */\n    private _iconSetConfigs;\n    /** Cache for icons loaded by direct URLs. */\n    private _cachedIconsByUrl;\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n    private _inProgressUrlFetches;\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n    private _fontCssClassesByAlias;\n    /** Registered icon resolver functions. */\n    private _resolvers;\n    /**\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n     */\n    private _defaultFontSetClass;\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any, _errorHandler: ErrorHandler);\n    /**\n     * Registers an icon by URL in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\n    /**\n     * Registers an icon using an HTML string in the default namespace.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this;\n    /**\n     * Registers an icon by URL in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param url\n     */\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\n    /**\n     * Registers an icon resolver function with the registry. The function will be invoked with the\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\n     * will be invoked in the order in which they have been registered.\n     * @param resolver Resolver function to be registered.\n     */\n    addSvgIconResolver(resolver: IconResolver): this;\n    /**\n     * Registers an icon using an HTML string in the specified namespace.\n     * @param namespace Namespace in which the icon should be registered.\n     * @param iconName Name under which the icon should be registered.\n     * @param literal SVG source of the icon.\n     */\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml, options?: IconOptions): this;\n    /**\n     * Registers an icon set by URL in the default namespace.\n     * @param url\n     */\n    addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this;\n    /**\n     * Registers an icon set using an HTML string in the default namespace.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this;\n    /**\n     * Registers an icon set by URL in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param url\n     */\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this;\n    /**\n     * Registers an icon set using an HTML string in the specified namespace.\n     * @param namespace Namespace in which to register the icon set.\n     * @param literal SVG source of the icon set.\n     */\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml, options?: IconOptions): this;\n    /**\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n     * component with the alias as the fontSet input will cause the class name to be applied\n     * to the `<mat-icon>` element.\n     *\n     * @param alias Alias for the font.\n     * @param className Class name override to be used instead of the alias.\n     */\n    registerFontClassAlias(alias: string, className?: string): this;\n    /**\n     * Returns the CSS class name associated with the alias by a previous call to\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n     */\n    classNameForFontAlias(alias: string): string;\n    /**\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     *\n     * @param className\n     */\n    setDefaultFontSetClass(className: string): this;\n    /**\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n     * have a fontSet input value, and is not loading an icon by name or URL.\n     */\n    getDefaultFontSetClass(): string;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\n     * it will not contain any modifications made to elements previously returned).\n     *\n     * @param safeUrl URL from which to fetch the SVG icon.\n     */\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\n    /**\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n     * if not, the Observable will throw an error.\n     *\n     * @param name Name of the icon to be retrieved.\n     * @param namespace Namespace in which to look for the icon.\n     */\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\n    ngOnDestroy(): void;\n    /**\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n     */\n    private _getSvgFromConfig;\n    /**\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\n     * First searches the available cached icons for a nested element with a matching name, and\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n     * that have not been cached, and searches again after all fetches are completed.\n     * The returned Observable produces the SVG element if possible, and throws\n     * an error if no icon with the specified name can be found.\n     */\n    private _getSvgFromIconSetConfigs;\n    /**\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractIconWithNameFromAnySet;\n    /**\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n     * from it.\n     */\n    private _loadSvgIconFromConfig;\n    /**\n     * Loads the content of the icon set URL specified in the\n     * SvgIconConfig and attaches it to the config.\n     */\n    private _loadSvgIconSetFromConfig;\n    /**\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\n     * returns it. Returns null if no matching element is found.\n     */\n    private _extractSvgIconFromSet;\n    /**\n     * Creates a DOM element from the given SVG string.\n     */\n    private _svgElementFromString;\n    /**\n     * Converts an element into an SVG node by cloning all of its children.\n     */\n    private _toSvgElement;\n    /**\n     * Sets the default attributes for an SVG element to be used as an icon.\n     */\n    private _setSvgAttributes;\n    /**\n     * Returns an Observable which produces the string contents of the given icon. Results may be\n     * cached, so future calls with the same URL may not cause another HTTP request.\n     */\n    private _fetchIcon;\n    /**\n     * Registers an icon config by name in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param iconName Name under which to register the config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconConfig;\n    /**\n     * Registers an icon set config in the specified namespace.\n     * @param namespace Namespace in which to register the icon config.\n     * @param config Config to be registered.\n     */\n    private _addSvgIconSetConfig;\n    /** Parses a config's text into an SVG element. */\n    private _svgElementFromConfig;\n    /** Tries to create an icon config through the registered resolver functions. */\n    private _getIconConfigFromResolvers;\n}\n/** @docs-private */\nexport declare function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, errorHandler: ErrorHandler, document?: any): MatIconRegistry;\n/** @docs-private */\nexport declare const ICON_REGISTRY_PROVIDER: {\n    provide: typeof MatIconRegistry;\n    deps: (Optional[] | typeof DomSanitizer | typeof ErrorHandler)[];\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\n};\n"]}
=======
{"version":3,"file":"icon-registry.d.ts","sources":["icon-registry.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ErrorHandler, Optional, OnDestroy } from '@angular/core';\r\nimport { DomSanitizer, SafeResourceUrl, SafeHtml } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\n/**\r\n * Returns an exception to be thrown in the case when attempting to\r\n * load an icon with a name that cannot be found.\r\n * @docs-private\r\n */\r\nexport declare function getMatIconNameNotFoundError(iconName: string): Error;\r\n/**\r\n * Returns an exception to be thrown when the consumer attempts to use\r\n * `<mat-icon>` without including @angular/common/http.\r\n * @docs-private\r\n */\r\nexport declare function getMatIconNoHttpProviderError(): Error;\r\n/**\r\n * Returns an exception to be thrown when a URL couldn't be sanitized.\r\n * @param url URL that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport declare function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error;\r\n/**\r\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\r\n * @param literal HTML that was attempted to be sanitized.\r\n * @docs-private\r\n */\r\nexport declare function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error;\r\n/** Options that can be used to configure how an icon or the icons in an icon set are presented. */\r\nexport interface IconOptions {\r\n    /** View box to set on the icon. */\r\n    viewBox?: string;\r\n    /** Whether or not to fetch the icon or icon set using HTTP credentials. */\r\n    withCredentials?: boolean;\r\n}\r\n/**\r\n * Function that will be invoked by the icon registry when trying to resolve the\r\n * URL from which to fetch an icon. The returned URL will be used to make a request for the icon.\r\n */\r\nexport declare type IconResolver = (name: string, namespace: string) => (SafeResourceUrl | SafeResourceUrlWithIconOptions | null);\r\n/** Object that specifies a URL from which to fetch an icon and the options to use for it. */\r\nexport interface SafeResourceUrlWithIconOptions {\r\n    url: SafeResourceUrl;\r\n    options: IconOptions;\r\n}\r\n/**\r\n * Service to register and display icons used by the `<mat-icon>` component.\r\n * - Registers icon URLs by namespace and name.\r\n * - Registers icon set URLs by namespace.\r\n * - Registers aliases for CSS classes, for use with icon fonts.\r\n * - Loads icons from URLs and extracts individual icons from icon sets.\r\n */\r\nexport declare class MatIconRegistry implements OnDestroy {\r\n    private _httpClient;\r\n    private _sanitizer;\r\n    private readonly _errorHandler;\r\n    private _document;\r\n    /**\r\n     * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\r\n     */\r\n    private _svgIconConfigs;\r\n    /**\r\n     * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\r\n     * Multiple icon sets can be registered under the same namespace.\r\n     */\r\n    private _iconSetConfigs;\r\n    /** Cache for icons loaded by direct URLs. */\r\n    private _cachedIconsByUrl;\r\n    /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\r\n    private _inProgressUrlFetches;\r\n    /** Map from font identifiers to their CSS class names. Used for icon fonts. */\r\n    private _fontCssClassesByAlias;\r\n    /** Registered icon resolver functions. */\r\n    private _resolvers;\r\n    /**\r\n     * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\r\n     * The default 'material-icons' value assumes that the material icon font has been loaded as\r\n     * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\r\n     */\r\n    private _defaultFontSetClass;\r\n    constructor(_httpClient: HttpClient, _sanitizer: DomSanitizer, document: any, _errorHandler: ErrorHandler);\r\n    /**\r\n     * Registers an icon by URL in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\r\n    addSvgIcon(iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon using an HTML string in the default namespace.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param literal SVG source of the icon.\r\n     */\r\n    addSvgIconLiteral(iconName: string, literal: SafeHtml, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon by URL in the specified namespace.\r\n     * @param namespace Namespace in which the icon should be registered.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param url\r\n     */\r\n    addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon resolver function with the registry. The function will be invoked with the\r\n     * name and namespace of an icon when the registry tries to resolve the URL from which to fetch\r\n     * the icon. The resolver is expected to return a `SafeResourceUrl` that points to the icon,\r\n     * an object with the icon URL and icon options, or `null` if the icon is not supported. Resolvers\r\n     * will be invoked in the order in which they have been registered.\r\n     * @param resolver Resolver function to be registered.\r\n     */\r\n    addSvgIconResolver(resolver: IconResolver): this;\r\n    /**\r\n     * Registers an icon using an HTML string in the specified namespace.\r\n     * @param namespace Namespace in which the icon should be registered.\r\n     * @param iconName Name under which the icon should be registered.\r\n     * @param literal SVG source of the icon.\r\n     */\r\n    addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon set by URL in the default namespace.\r\n     * @param url\r\n     */\r\n    addSvgIconSet(url: SafeResourceUrl, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon set using an HTML string in the default namespace.\r\n     * @param literal SVG source of the icon set.\r\n     */\r\n    addSvgIconSetLiteral(literal: SafeHtml, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon set by URL in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon set.\r\n     * @param url\r\n     */\r\n    addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl, options?: IconOptions): this;\r\n    /**\r\n     * Registers an icon set using an HTML string in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon set.\r\n     * @param literal SVG source of the icon set.\r\n     */\r\n    addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml, options?: IconOptions): this;\r\n    /**\r\n     * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\r\n     * component with the alias as the fontSet input will cause the class name to be applied\r\n     * to the `<mat-icon>` element.\r\n     *\r\n     * @param alias Alias for the font.\r\n     * @param className Class name override to be used instead of the alias.\r\n     */\r\n    registerFontClassAlias(alias: string, className?: string): this;\r\n    /**\r\n     * Returns the CSS class name associated with the alias by a previous call to\r\n     * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\r\n     */\r\n    classNameForFontAlias(alias: string): string;\r\n    /**\r\n     * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     *\r\n     * @param className\r\n     */\r\n    setDefaultFontSetClass(className: string): this;\r\n    /**\r\n     * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\r\n     * have a fontSet input value, and is not loading an icon by name or URL.\r\n     */\r\n    getDefaultFontSetClass(): string;\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\r\n     * The response from the URL may be cached so this will not always cause an HTTP request, but\r\n     * the produced element will always be a new copy of the originally fetched icon. (That is,\r\n     * it will not contain any modifications made to elements previously returned).\r\n     *\r\n     * @param safeUrl URL from which to fetch the SVG icon.\r\n     */\r\n    getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement>;\r\n    /**\r\n     * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\r\n     * and namespace. The icon must have been previously registered with addIcon or addIconSet;\r\n     * if not, the Observable will throw an error.\r\n     *\r\n     * @param name Name of the icon to be retrieved.\r\n     * @param namespace Namespace in which to look for the icon.\r\n     */\r\n    getNamedSvgIcon(name: string, namespace?: string): Observable<SVGElement>;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\r\n     */\r\n    private _getSvgFromConfig;\r\n    /**\r\n     * Attempts to find an icon with the specified name in any of the SVG icon sets.\r\n     * First searches the available cached icons for a nested element with a matching name, and\r\n     * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\r\n     * that have not been cached, and searches again after all fetches are completed.\r\n     * The returned Observable produces the SVG element if possible, and throws\r\n     * an error if no icon with the specified name can be found.\r\n     */\r\n    private _getSvgFromIconSetConfigs;\r\n    /**\r\n     * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     */\r\n    private _extractIconWithNameFromAnySet;\r\n    /**\r\n     * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\r\n     * from it.\r\n     */\r\n    private _loadSvgIconFromConfig;\r\n    /**\r\n     * Loads the content of the icon set URL specified in the\r\n     * SvgIconConfig and attaches it to the config.\r\n     */\r\n    private _loadSvgIconSetFromConfig;\r\n    /**\r\n     * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\r\n     * tag matches the specified name. If found, copies the nested element to a new SVG element and\r\n     * returns it. Returns null if no matching element is found.\r\n     */\r\n    private _extractSvgIconFromSet;\r\n    /**\r\n     * Creates a DOM element from the given SVG string.\r\n     */\r\n    private _svgElementFromString;\r\n    /**\r\n     * Converts an element into an SVG node by cloning all of its children.\r\n     */\r\n    private _toSvgElement;\r\n    /**\r\n     * Sets the default attributes for an SVG element to be used as an icon.\r\n     */\r\n    private _setSvgAttributes;\r\n    /**\r\n     * Returns an Observable which produces the string contents of the given icon. Results may be\r\n     * cached, so future calls with the same URL may not cause another HTTP request.\r\n     */\r\n    private _fetchIcon;\r\n    /**\r\n     * Registers an icon config by name in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon config.\r\n     * @param iconName Name under which to register the config.\r\n     * @param config Config to be registered.\r\n     */\r\n    private _addSvgIconConfig;\r\n    /**\r\n     * Registers an icon set config in the specified namespace.\r\n     * @param namespace Namespace in which to register the icon config.\r\n     * @param config Config to be registered.\r\n     */\r\n    private _addSvgIconSetConfig;\r\n    /** Parses a config's text into an SVG element. */\r\n    private _svgElementFromConfig;\r\n    /** Tries to create an icon config through the registered resolver functions. */\r\n    private _getIconConfigFromResolvers;\r\n}\r\n/** @docs-private */\r\nexport declare function ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: MatIconRegistry, httpClient: HttpClient, sanitizer: DomSanitizer, errorHandler: ErrorHandler, document?: any): MatIconRegistry;\r\n/** @docs-private */\r\nexport declare const ICON_REGISTRY_PROVIDER: {\r\n    provide: typeof MatIconRegistry;\r\n    deps: (Optional[] | typeof DomSanitizer | typeof ErrorHandler)[];\r\n    useFactory: typeof ICON_REGISTRY_PROVIDER_FACTORY;\r\n};\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
