<<<<<<< HEAD
{"version":3,"file":"input.d.ts","sources":["input.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { BooleanInput } from '@angular/cdk/coercion';\nimport { Platform } from '@angular/cdk/platform';\nimport { AutofillMonitor } from '@angular/cdk/text-field';\nimport { AfterViewInit, DoCheck, ElementRef, NgZone, OnChanges, OnDestroy } from '@angular/core';\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\nimport { CanUpdateErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n/** @docs-private */\ndeclare const _MatInputBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanUpdateErrorState> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanUpdateErrorState> & {\n    new (_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl): {\n        _defaultErrorStateMatcher: ErrorStateMatcher;\n        _parentForm: NgForm;\n        _parentFormGroup: FormGroupDirective;\n        /** @docs-private */\n        ngControl: NgControl;\n    };\n};\n/** Directive that allows a native input to work inside a `MatFormField`. */\nexport declare class MatInput extends _MatInputBase implements MatFormFieldControl<any>, OnChanges, OnDestroy, AfterViewInit, DoCheck, CanUpdateErrorState {\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\n    protected _platform: Platform;\n    private _autofillMonitor;\n    private _formField?;\n    protected _uid: string;\n    protected _previousNativeValue: any;\n    private _inputValueAccessor;\n    private _previousPlaceholder;\n    /** Whether the component is being rendered on the server. */\n    readonly _isServer: boolean;\n    /** Whether the component is a native html select. */\n    readonly _isNativeSelect: boolean;\n    /** Whether the component is a textarea. */\n    readonly _isTextarea: boolean;\n    /** Whether the input is inside of a form field. */\n    readonly _isInFormField: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    focused: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    readonly stateChanges: Subject<void>;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    controlType: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    autofilled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled(): boolean;\n    set disabled(value: boolean);\n    protected _disabled: boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id(): string;\n    set id(value: string);\n    protected _id: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    placeholder: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required(): boolean;\n    set required(value: boolean);\n    protected _required: boolean;\n    /** Input type of the element. */\n    get type(): string;\n    set type(value: string);\n    protected _type: string;\n    /** An object used to control when error messages are shown. */\n    errorStateMatcher: ErrorStateMatcher;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy: string;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value(): string;\n    set value(value: string);\n    /** Whether the element is readonly. */\n    get readonly(): boolean;\n    set readonly(value: boolean);\n    private _readonly;\n    protected _neverEmptyInputTypes: string[];\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor, ngZone: NgZone, _formField?: MatFormField | undefined);\n    ngAfterViewInit(): void;\n    ngOnChanges(): void;\n    ngOnDestroy(): void;\n    ngDoCheck(): void;\n    /** Focuses the input. */\n    focus(options?: FocusOptions): void;\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused: boolean): void;\n    _onInput(): void;\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    private _dirtyCheckPlaceholder;\n    /** Does some manual dirty checking on the native input `value` property. */\n    protected _dirtyCheckNativeValue(): void;\n    /** Make sure the input is a supported type. */\n    protected _validateType(): void;\n    /** Checks whether the input type is one of the types that are never empty. */\n    protected _isNeverEmpty(): boolean;\n    /** Checks whether the input is invalid based on the native validation. */\n    protected _isBadInput(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat(): boolean;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids: string[]): void;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(): void;\n    static ngAcceptInputType_disabled: BooleanInput;\n    static ngAcceptInputType_readonly: BooleanInput;\n    static ngAcceptInputType_required: BooleanInput;\n    static ngAcceptInputType_value: any;\n}\nexport {};\n"]}
=======
{"version":3,"file":"input.d.ts","sources":["input.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { AutofillMonitor } from '@angular/cdk/text-field';\r\nimport { AfterViewInit, DoCheck, ElementRef, NgZone, OnChanges, OnDestroy } from '@angular/core';\r\nimport { FormGroupDirective, NgControl, NgForm } from '@angular/forms';\r\nimport { CanUpdateErrorState, ErrorStateMatcher } from '@angular/material/core';\r\nimport { MatFormFieldControl, MatFormField } from '@angular/material/form-field';\r\nimport { Subject } from 'rxjs';\r\n/** @docs-private */\r\ndeclare const _MatInputBase: import(\"@angular/material/core/common-behaviors/constructor\").Constructor<CanUpdateErrorState> & import(\"@angular/material/core/common-behaviors/constructor\").AbstractConstructor<CanUpdateErrorState> & {\r\n    new (_defaultErrorStateMatcher: ErrorStateMatcher, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, ngControl: NgControl): {\r\n        _defaultErrorStateMatcher: ErrorStateMatcher;\r\n        _parentForm: NgForm;\r\n        _parentFormGroup: FormGroupDirective;\r\n        /** @docs-private */\r\n        ngControl: NgControl;\r\n    };\r\n};\r\n/** Directive that allows a native input to work inside a `MatFormField`. */\r\nexport declare class MatInput extends _MatInputBase implements MatFormFieldControl<any>, OnChanges, OnDestroy, AfterViewInit, DoCheck, CanUpdateErrorState {\r\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>;\r\n    protected _platform: Platform;\r\n    private _autofillMonitor;\r\n    private _formField?;\r\n    protected _uid: string;\r\n    protected _previousNativeValue: any;\r\n    private _inputValueAccessor;\r\n    private _previousPlaceholder;\r\n    /** Whether the component is being rendered on the server. */\r\n    readonly _isServer: boolean;\r\n    /** Whether the component is a native html select. */\r\n    readonly _isNativeSelect: boolean;\r\n    /** Whether the component is a textarea. */\r\n    readonly _isTextarea: boolean;\r\n    /** Whether the input is inside of a form field. */\r\n    readonly _isInFormField: boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    focused: boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    readonly stateChanges: Subject<void>;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    controlType: string;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    autofilled: boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get disabled(): boolean;\r\n    set disabled(value: boolean);\r\n    protected _disabled: boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get id(): string;\r\n    set id(value: string);\r\n    protected _id: string;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    placeholder: string;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get required(): boolean;\r\n    set required(value: boolean);\r\n    protected _required: boolean;\r\n    /** Input type of the element. */\r\n    get type(): string;\r\n    set type(value: string);\r\n    protected _type: string;\r\n    /** An object used to control when error messages are shown. */\r\n    errorStateMatcher: ErrorStateMatcher;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    userAriaDescribedBy: string;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get value(): string;\r\n    set value(value: string);\r\n    /** Whether the element is readonly. */\r\n    get readonly(): boolean;\r\n    set readonly(value: boolean);\r\n    private _readonly;\r\n    protected _neverEmptyInputTypes: string[];\r\n    constructor(_elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>, _platform: Platform, ngControl: NgControl, _parentForm: NgForm, _parentFormGroup: FormGroupDirective, _defaultErrorStateMatcher: ErrorStateMatcher, inputValueAccessor: any, _autofillMonitor: AutofillMonitor, ngZone: NgZone, _formField?: MatFormField | undefined);\r\n    ngAfterViewInit(): void;\r\n    ngOnChanges(): void;\r\n    ngOnDestroy(): void;\r\n    ngDoCheck(): void;\r\n    /** Focuses the input. */\r\n    focus(options?: FocusOptions): void;\r\n    /** Callback for the cases where the focused state of the input changes. */\r\n    _focusChanged(isFocused: boolean): void;\r\n    _onInput(): void;\r\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\r\n    private _dirtyCheckPlaceholder;\r\n    /** Does some manual dirty checking on the native input `value` property. */\r\n    protected _dirtyCheckNativeValue(): void;\r\n    /** Make sure the input is a supported type. */\r\n    protected _validateType(): void;\r\n    /** Checks whether the input type is one of the types that are never empty. */\r\n    protected _isNeverEmpty(): boolean;\r\n    /** Checks whether the input is invalid based on the native validation. */\r\n    protected _isBadInput(): boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get empty(): boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    get shouldLabelFloat(): boolean;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    setDescribedByIds(ids: string[]): void;\r\n    /**\r\n     * Implemented as part of MatFormFieldControl.\r\n     * @docs-private\r\n     */\r\n    onContainerClick(): void;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_readonly: BooleanInput;\r\n    static ngAcceptInputType_required: BooleanInput;\r\n    static ngAcceptInputType_value: any;\r\n}\r\nexport {};\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
