{"version":3,"file":"moment-date-adapter.d.ts","sources":["moment-date-adapter.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { DateAdapter } from '@angular/material/core';\r\nimport { Moment } from 'moment';\r\n/** Configurable options for {@see MomentDateAdapter}. */\r\nexport interface MatMomentDateAdapterOptions {\r\n    /**\r\n     * When enabled, the dates have to match the format exactly.\r\n     * See https://momentjs.com/guides/#/parsing/strict-mode/.\r\n     */\r\n    strict?: boolean;\r\n    /**\r\n     * Turns the use of utc dates on or off.\r\n     * Changing this will change how Angular Material components like DatePicker output dates.\r\n     * {@default false}\r\n     */\r\n    useUtc?: boolean;\r\n}\r\n/** InjectionToken for moment date adapter to configure options. */\r\nexport declare const MAT_MOMENT_DATE_ADAPTER_OPTIONS: InjectionToken<MatMomentDateAdapterOptions>;\r\n/** @docs-private */\r\nexport declare function MAT_MOMENT_DATE_ADAPTER_OPTIONS_FACTORY(): MatMomentDateAdapterOptions;\r\n/** Adapts Moment.js Dates for use with Angular Material. */\r\nexport declare class MomentDateAdapter extends DateAdapter<Moment> {\r\n    private _options?;\r\n    private _localeData;\r\n    constructor(dateLocale: string, _options?: MatMomentDateAdapterOptions | undefined);\r\n    setLocale(locale: string): void;\r\n    getYear(date: Moment): number;\r\n    getMonth(date: Moment): number;\r\n    getDate(date: Moment): number;\r\n    getDayOfWeek(date: Moment): number;\r\n    getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\r\n    getDateNames(): string[];\r\n    getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\r\n    getYearName(date: Moment): string;\r\n    getFirstDayOfWeek(): number;\r\n    getNumDaysInMonth(date: Moment): number;\r\n    clone(date: Moment): Moment;\r\n    createDate(year: number, month: number, date: number): Moment;\r\n    today(): Moment;\r\n    parse(value: any, parseFormat: string | string[]): Moment | null;\r\n    format(date: Moment, displayFormat: string): string;\r\n    addCalendarYears(date: Moment, years: number): Moment;\r\n    addCalendarMonths(date: Moment, months: number): Moment;\r\n    addCalendarDays(date: Moment, days: number): Moment;\r\n    toIso8601(date: Moment): string;\r\n    /**\r\n     * Returns the given value if given a valid Moment or null. Deserializes valid ISO 8601 strings\r\n     * (https://www.ietf.org/rfc/rfc3339.txt) and valid Date objects into valid Moments and empty\r\n     * string into null. Returns an invalid date for all other values.\r\n     */\r\n    deserialize(value: any): Moment | null;\r\n    isDateInstance(obj: any): boolean;\r\n    isValid(date: Moment): boolean;\r\n    invalid(): Moment;\r\n    /** Creates a Moment instance while respecting the current UTC settings. */\r\n    private _createMoment;\r\n}\r\n"]}