<<<<<<< HEAD
{"version":3,"file":"virtual-for-of.d.ts","sources":["virtual-for-of.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { CollectionViewer, DataSource, ListRange, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\nimport { DoCheck, IterableDiffers, NgIterable, NgZone, OnDestroy, TemplateRef, TrackByFunction, ViewContainerRef } from '@angular/core';\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { Observable, Subject } from 'rxjs';\nimport { CdkVirtualScrollRepeater } from './virtual-scroll-repeater';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n/** The context for an item rendered by `CdkVirtualForOf` */\nexport declare type CdkVirtualForOfContext<T> = {\n    /** The item value. */\n    $implicit: T;\n    /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\n    cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\n    /** The index of the item in the DataSource. */\n    index: number;\n    /** The number of items in the DataSource. */\n    count: number;\n    /** Whether this is the first item in the DataSource. */\n    first: boolean;\n    /** Whether this is the last item in the DataSource. */\n    last: boolean;\n    /** Whether the index is even. */\n    even: boolean;\n    /** Whether the index is odd. */\n    odd: boolean;\n};\n/**\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\n * container.\n */\nexport declare class CdkVirtualForOf<T> implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy {\n    /** The view container to add items to. */\n    private _viewContainerRef;\n    /** The template to use when stamping out new items. */\n    private _template;\n    /** The set of available differs. */\n    private _differs;\n    /** The strategy used to render items in the virtual scroll viewport. */\n    private _viewRepeater;\n    /** The virtual scrolling viewport that these items are being rendered in. */\n    private _viewport;\n    /** Emits when the rendered view of the data changes. */\n    readonly viewChange: Subject<ListRange>;\n    /** Subject that emits when a new DataSource instance is given. */\n    private readonly _dataSourceChanges;\n    /** The DataSource to display. */\n    get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n    set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined);\n    _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\n    /**\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\n     * the item and produces a value to be used as the item's identity when tracking changes.\n     */\n    get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined;\n    set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined);\n    private _cdkVirtualForTrackBy;\n    /** The template used to stamp out new elements. */\n    set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>);\n    /**\n     * The size of the cache used to store templates that are not being used for re-use later.\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\n     */\n    get cdkVirtualForTemplateCacheSize(): number;\n    set cdkVirtualForTemplateCacheSize(size: number);\n    /** Emits whenever the data in the current DataSource changes. */\n    readonly dataStream: Observable<readonly T[]>;\n    /** The differ used to calculate changes to the data. */\n    private _differ;\n    /** The most recent data emitted from the DataSource. */\n    private _data;\n    /** The currently rendered items. */\n    private _renderedItems;\n    /** The currently rendered range of indices. */\n    private _renderedRange;\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\n    private _needsUpdate;\n    private readonly _destroyed;\n    constructor(\n    /** The view container to add items to. */\n    _viewContainerRef: ViewContainerRef, \n    /** The template to use when stamping out new items. */\n    _template: TemplateRef<CdkVirtualForOfContext<T>>, \n    /** The set of available differs. */\n    _differs: IterableDiffers, \n    /** The strategy used to render items in the virtual scroll viewport. */\n    _viewRepeater: _RecycleViewRepeaterStrategy<T, T, CdkVirtualForOfContext<T>>, \n    /** The virtual scrolling viewport that these items are being rendered in. */\n    _viewport: CdkVirtualScrollViewport, ngZone: NgZone);\n    /**\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\n     * in the specified range. Throws an error if the range includes items that are not currently\n     * rendered.\n     */\n    measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    /** React to scroll state changes in the viewport. */\n    private _onRenderedDataChange;\n    /** Swap out one `DataSource` for another. */\n    private _changeDataSource;\n    /** Update the `CdkVirtualForOfContext` for all views. */\n    private _updateContext;\n    /** Apply changes to the DOM. */\n    private _applyChanges;\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\n    private _updateComputedContextProperties;\n    private _getEmbeddedViewArgs;\n    static ngAcceptInputType_cdkVirtualForTemplateCacheSize: NumberInput;\n}\n"]}
=======
{"version":3,"file":"virtual-for-of.d.ts","sources":["virtual-for-of.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { CollectionViewer, DataSource, ListRange, _RecycleViewRepeaterStrategy } from '@angular/cdk/collections';\r\nimport { DoCheck, IterableDiffers, NgIterable, NgZone, OnDestroy, TemplateRef, TrackByFunction, ViewContainerRef } from '@angular/core';\r\nimport { NumberInput } from '@angular/cdk/coercion';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { CdkVirtualScrollRepeater } from './virtual-scroll-repeater';\r\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\r\n/** The context for an item rendered by `CdkVirtualForOf` */\r\nexport declare type CdkVirtualForOfContext<T> = {\r\n    /** The item value. */\r\n    $implicit: T;\r\n    /** The DataSource, Observable, or NgIterable that was passed to *cdkVirtualFor. */\r\n    cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T>;\r\n    /** The index of the item in the DataSource. */\r\n    index: number;\r\n    /** The number of items in the DataSource. */\r\n    count: number;\r\n    /** Whether this is the first item in the DataSource. */\r\n    first: boolean;\r\n    /** Whether this is the last item in the DataSource. */\r\n    last: boolean;\r\n    /** Whether the index is even. */\r\n    even: boolean;\r\n    /** Whether the index is odd. */\r\n    odd: boolean;\r\n};\r\n/**\r\n * A directive similar to `ngForOf` to be used for rendering data inside a virtual scrolling\r\n * container.\r\n */\r\nexport declare class CdkVirtualForOf<T> implements CdkVirtualScrollRepeater<T>, CollectionViewer, DoCheck, OnDestroy {\r\n    /** The view container to add items to. */\r\n    private _viewContainerRef;\r\n    /** The template to use when stamping out new items. */\r\n    private _template;\r\n    /** The set of available differs. */\r\n    private _differs;\r\n    /** The strategy used to render items in the virtual scroll viewport. */\r\n    private _viewRepeater;\r\n    /** The virtual scrolling viewport that these items are being rendered in. */\r\n    private _viewport;\r\n    /** Emits when the rendered view of the data changes. */\r\n    readonly viewChange: Subject<ListRange>;\r\n    /** Subject that emits when a new DataSource instance is given. */\r\n    private readonly _dataSourceChanges;\r\n    /** The DataSource to display. */\r\n    get cdkVirtualForOf(): DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\r\n    set cdkVirtualForOf(value: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined);\r\n    _cdkVirtualForOf: DataSource<T> | Observable<T[]> | NgIterable<T> | null | undefined;\r\n    /**\r\n     * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and\r\n     * the item and produces a value to be used as the item's identity when tracking changes.\r\n     */\r\n    get cdkVirtualForTrackBy(): TrackByFunction<T> | undefined;\r\n    set cdkVirtualForTrackBy(fn: TrackByFunction<T> | undefined);\r\n    private _cdkVirtualForTrackBy;\r\n    /** The template used to stamp out new elements. */\r\n    set cdkVirtualForTemplate(value: TemplateRef<CdkVirtualForOfContext<T>>);\r\n    /**\r\n     * The size of the cache used to store templates that are not being used for re-use later.\r\n     * Setting the cache size to `0` will disable caching. Defaults to 20 templates.\r\n     */\r\n    get cdkVirtualForTemplateCacheSize(): number;\r\n    set cdkVirtualForTemplateCacheSize(size: number);\r\n    /** Emits whenever the data in the current DataSource changes. */\r\n    readonly dataStream: Observable<readonly T[]>;\r\n    /** The differ used to calculate changes to the data. */\r\n    private _differ;\r\n    /** The most recent data emitted from the DataSource. */\r\n    private _data;\r\n    /** The currently rendered items. */\r\n    private _renderedItems;\r\n    /** The currently rendered range of indices. */\r\n    private _renderedRange;\r\n    /** Whether the rendered data should be updated during the next ngDoCheck cycle. */\r\n    private _needsUpdate;\r\n    private readonly _destroyed;\r\n    constructor(\r\n    /** The view container to add items to. */\r\n    _viewContainerRef: ViewContainerRef, \r\n    /** The template to use when stamping out new items. */\r\n    _template: TemplateRef<CdkVirtualForOfContext<T>>, \r\n    /** The set of available differs. */\r\n    _differs: IterableDiffers, \r\n    /** The strategy used to render items in the virtual scroll viewport. */\r\n    _viewRepeater: _RecycleViewRepeaterStrategy<T, T, CdkVirtualForOfContext<T>>, \r\n    /** The virtual scrolling viewport that these items are being rendered in. */\r\n    _viewport: CdkVirtualScrollViewport, ngZone: NgZone);\r\n    /**\r\n     * Measures the combined size (width for horizontal orientation, height for vertical) of all items\r\n     * in the specified range. Throws an error if the range includes items that are not currently\r\n     * rendered.\r\n     */\r\n    measureRangeSize(range: ListRange, orientation: 'horizontal' | 'vertical'): number;\r\n    ngDoCheck(): void;\r\n    ngOnDestroy(): void;\r\n    /** React to scroll state changes in the viewport. */\r\n    private _onRenderedDataChange;\r\n    /** Swap out one `DataSource` for another. */\r\n    private _changeDataSource;\r\n    /** Update the `CdkVirtualForOfContext` for all views. */\r\n    private _updateContext;\r\n    /** Apply changes to the DOM. */\r\n    private _applyChanges;\r\n    /** Update the computed properties on the `CdkVirtualForOfContext`. */\r\n    private _updateComputedContextProperties;\r\n    private _getEmbeddedViewArgs;\r\n    static ngAcceptInputType_cdkVirtualForTemplateCacheSize: NumberInput;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
