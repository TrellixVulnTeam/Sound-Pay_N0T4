<<<<<<< HEAD
{"version":3,"file":"fixed-size-virtual-scroll.d.ts","sources":["fixed-size-virtual-scroll.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NumberInput } from '@angular/cdk/coercion';\nimport { OnChanges } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { VirtualScrollStrategy } from './virtual-scroll-strategy';\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\n/** Virtual scrolling strategy for lists with items of known fixed size. */\nexport declare class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\n    private readonly _scrolledIndexChange;\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    scrolledIndexChange: Observable<number>;\n    /** The attached viewport. */\n    private _viewport;\n    /** The size of the items in the virtually scrolling list. */\n    private _itemSize;\n    /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\n    private _minBufferPx;\n    /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\n    private _maxBufferPx;\n    /**\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    constructor(itemSize: number, minBufferPx: number, maxBufferPx: number);\n    /**\n     * Attaches this scroll strategy to a viewport.\n     * @param viewport The viewport to attach this strategy to.\n     */\n    attach(viewport: CdkVirtualScrollViewport): void;\n    /** Detaches this scroll strategy from the currently attached viewport. */\n    detach(): void;\n    /**\n     * Update the item size and buffer size.\n     * @param itemSize The size of the items in the virtually scrolling list.\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\n     */\n    updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number): void;\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentScrolled(): void;\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onDataLengthChanged(): void;\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onContentRendered(): void;\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\n    onRenderedOffsetChanged(): void;\n    /**\n     * Scroll to the offset for the given index.\n     * @param index The index of the element to scroll to.\n     * @param behavior The ScrollBehavior to use when scrolling.\n     */\n    scrollToIndex(index: number, behavior: ScrollBehavior): void;\n    /** Update the viewport's total content size. */\n    private _updateTotalContentSize;\n    /** Update the viewport's rendered range. */\n    private _updateRenderedRange;\n}\n/**\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\n * `FixedSizeVirtualScrollStrategy` from the given directive.\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\n *     `FixedSizeVirtualScrollStrategy` from.\n */\nexport declare function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll): FixedSizeVirtualScrollStrategy;\n/** A virtual scroll strategy that supports fixed-size items. */\nexport declare class CdkFixedSizeVirtualScroll implements OnChanges {\n    /** The size of the items in the list (in pixels). */\n    get itemSize(): number;\n    set itemSize(value: number);\n    _itemSize: number;\n    /**\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\n     */\n    get minBufferPx(): number;\n    set minBufferPx(value: number);\n    _minBufferPx: number;\n    /**\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\n     */\n    get maxBufferPx(): number;\n    set maxBufferPx(value: number);\n    _maxBufferPx: number;\n    /** The scroll strategy used by this directive. */\n    _scrollStrategy: FixedSizeVirtualScrollStrategy;\n    ngOnChanges(): void;\n    static ngAcceptInputType_itemSize: NumberInput;\n    static ngAcceptInputType_minBufferPx: NumberInput;\n    static ngAcceptInputType_maxBufferPx: NumberInput;\n}\n"]}
=======
{"version":3,"file":"fixed-size-virtual-scroll.d.ts","sources":["fixed-size-virtual-scroll.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { NumberInput } from '@angular/cdk/coercion';\r\nimport { OnChanges } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { VirtualScrollStrategy } from './virtual-scroll-strategy';\r\nimport { CdkVirtualScrollViewport } from './virtual-scroll-viewport';\r\n/** Virtual scrolling strategy for lists with items of known fixed size. */\r\nexport declare class FixedSizeVirtualScrollStrategy implements VirtualScrollStrategy {\r\n    private readonly _scrolledIndexChange;\r\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n    scrolledIndexChange: Observable<number>;\r\n    /** The attached viewport. */\r\n    private _viewport;\r\n    /** The size of the items in the virtually scrolling list. */\r\n    private _itemSize;\r\n    /** The minimum amount of buffer rendered beyond the viewport (in pixels). */\r\n    private _minBufferPx;\r\n    /** The number of buffer items to render beyond the edge of the viewport (in pixels). */\r\n    private _maxBufferPx;\r\n    /**\r\n     * @param itemSize The size of the items in the virtually scrolling list.\r\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n     */\r\n    constructor(itemSize: number, minBufferPx: number, maxBufferPx: number);\r\n    /**\r\n     * Attaches this scroll strategy to a viewport.\r\n     * @param viewport The viewport to attach this strategy to.\r\n     */\r\n    attach(viewport: CdkVirtualScrollViewport): void;\r\n    /** Detaches this scroll strategy from the currently attached viewport. */\r\n    detach(): void;\r\n    /**\r\n     * Update the item size and buffer size.\r\n     * @param itemSize The size of the items in the virtually scrolling list.\r\n     * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more\r\n     * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.\r\n     */\r\n    updateItemAndBufferSize(itemSize: number, minBufferPx: number, maxBufferPx: number): void;\r\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n    onContentScrolled(): void;\r\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n    onDataLengthChanged(): void;\r\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n    onContentRendered(): void;\r\n    /** @docs-private Implemented as part of VirtualScrollStrategy. */\r\n    onRenderedOffsetChanged(): void;\r\n    /**\r\n     * Scroll to the offset for the given index.\r\n     * @param index The index of the element to scroll to.\r\n     * @param behavior The ScrollBehavior to use when scrolling.\r\n     */\r\n    scrollToIndex(index: number, behavior: ScrollBehavior): void;\r\n    /** Update the viewport's total content size. */\r\n    private _updateTotalContentSize;\r\n    /** Update the viewport's rendered range. */\r\n    private _updateRenderedRange;\r\n}\r\n/**\r\n * Provider factory for `FixedSizeVirtualScrollStrategy` that simply extracts the already created\r\n * `FixedSizeVirtualScrollStrategy` from the given directive.\r\n * @param fixedSizeDir The instance of `CdkFixedSizeVirtualScroll` to extract the\r\n *     `FixedSizeVirtualScrollStrategy` from.\r\n */\r\nexport declare function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir: CdkFixedSizeVirtualScroll): FixedSizeVirtualScrollStrategy;\r\n/** A virtual scroll strategy that supports fixed-size items. */\r\nexport declare class CdkFixedSizeVirtualScroll implements OnChanges {\r\n    /** The size of the items in the list (in pixels). */\r\n    get itemSize(): number;\r\n    set itemSize(value: number);\r\n    _itemSize: number;\r\n    /**\r\n     * The minimum amount of buffer rendered beyond the viewport (in pixels).\r\n     * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.\r\n     */\r\n    get minBufferPx(): number;\r\n    set minBufferPx(value: number);\r\n    _minBufferPx: number;\r\n    /**\r\n     * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.\r\n     */\r\n    get maxBufferPx(): number;\r\n    set maxBufferPx(value: number);\r\n    _maxBufferPx: number;\r\n    /** The scroll strategy used by this directive. */\r\n    _scrollStrategy: FixedSizeVirtualScrollStrategy;\r\n    ngOnChanges(): void;\r\n    static ngAcceptInputType_itemSize: NumberInput;\r\n    static ngAcceptInputType_minBufferPx: NumberInput;\r\n    static ngAcceptInputType_maxBufferPx: NumberInput;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
