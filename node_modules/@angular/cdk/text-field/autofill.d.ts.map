<<<<<<< HEAD
{"version":3,"file":"autofill.d.ts","sources":["autofill.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { Platform } from '@angular/cdk/platform';\nimport { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n/** An event that is emitted when the autofill state of an input changes. */\nexport declare type AutofillEvent = {\n    /** The element whose autofill state changes. */\n    target: Element;\n    /** Whether the element is currently autofilled. */\n    isAutofilled: boolean;\n};\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nexport declare class AutofillMonitor implements OnDestroy {\n    private _platform;\n    private _ngZone;\n    private _monitoredElements;\n    constructor(_platform: Platform, _ngZone: NgZone);\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param element The element to monitor.\n     * @return A stream of autofill state changes.\n     */\n    monitor(element: Element): Observable<AutofillEvent>;\n    /**\n     * Monitor for changes in the autofill state of the given input element.\n     * @param element The element to monitor.\n     * @return A stream of autofill state changes.\n     */\n    monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: Element): void;\n    /**\n     * Stop monitoring the autofill state of the given input element.\n     * @param element The element to stop monitoring.\n     */\n    stopMonitoring(element: ElementRef<Element>): void;\n    ngOnDestroy(): void;\n}\n/** A directive that can be used to monitor the autofill state of an input. */\nexport declare class CdkAutofill implements OnDestroy, OnInit {\n    private _elementRef;\n    private _autofillMonitor;\n    /** Emits when the autofill state of the element changes. */\n    readonly cdkAutofill: EventEmitter<AutofillEvent>;\n    constructor(_elementRef: ElementRef<HTMLElement>, _autofillMonitor: AutofillMonitor);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n}\n"]}
=======
{"version":3,"file":"autofill.d.ts","sources":["autofill.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { ElementRef, EventEmitter, NgZone, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n/** An event that is emitted when the autofill state of an input changes. */\r\nexport declare type AutofillEvent = {\r\n    /** The element whose autofill state changes. */\r\n    target: Element;\r\n    /** Whether the element is currently autofilled. */\r\n    isAutofilled: boolean;\r\n};\r\n/**\r\n * An injectable service that can be used to monitor the autofill state of an input.\r\n * Based on the following blog post:\r\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\r\n */\r\nexport declare class AutofillMonitor implements OnDestroy {\r\n    private _platform;\r\n    private _ngZone;\r\n    private _monitoredElements;\r\n    constructor(_platform: Platform, _ngZone: NgZone);\r\n    /**\r\n     * Monitor for changes in the autofill state of the given input element.\r\n     * @param element The element to monitor.\r\n     * @return A stream of autofill state changes.\r\n     */\r\n    monitor(element: Element): Observable<AutofillEvent>;\r\n    /**\r\n     * Monitor for changes in the autofill state of the given input element.\r\n     * @param element The element to monitor.\r\n     * @return A stream of autofill state changes.\r\n     */\r\n    monitor(element: ElementRef<Element>): Observable<AutofillEvent>;\r\n    /**\r\n     * Stop monitoring the autofill state of the given input element.\r\n     * @param element The element to stop monitoring.\r\n     */\r\n    stopMonitoring(element: Element): void;\r\n    /**\r\n     * Stop monitoring the autofill state of the given input element.\r\n     * @param element The element to stop monitoring.\r\n     */\r\n    stopMonitoring(element: ElementRef<Element>): void;\r\n    ngOnDestroy(): void;\r\n}\r\n/** A directive that can be used to monitor the autofill state of an input. */\r\nexport declare class CdkAutofill implements OnDestroy, OnInit {\r\n    private _elementRef;\r\n    private _autofillMonitor;\r\n    /** Emits when the autofill state of the element changes. */\r\n    readonly cdkAutofill: EventEmitter<AutofillEvent>;\r\n    constructor(_elementRef: ElementRef<HTMLElement>, _autofillMonitor: AutofillMonitor);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
