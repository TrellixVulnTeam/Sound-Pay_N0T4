<<<<<<< HEAD
{"version":3,"file":"drag-drop-registry.d.ts","sources":["drag-drop-registry.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { NgZone, OnDestroy } from '@angular/core';\nimport { Observable, Subject } from 'rxjs';\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nexport declare class DragDropRegistry<I extends {\n    isDragging(): boolean;\n}, C> implements OnDestroy {\n    private _ngZone;\n    private _document;\n    /** Registered drop container instances. */\n    private _dropInstances;\n    /** Registered drag item instances. */\n    private _dragInstances;\n    /** Drag item instances that are currently being dragged. */\n    private _activeDragInstances;\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    private _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    private _draggingPredicate;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    readonly pointerMove: Subject<TouchEvent | MouseEvent>;\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    readonly pointerUp: Subject<TouchEvent | MouseEvent>;\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n    readonly scroll: Subject<Event>;\n    constructor(_ngZone: NgZone, _document: any);\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop: C): void;\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag: I): void;\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop: C): void;\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag: I): void;\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag: I, event: TouchEvent | MouseEvent): void;\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag: I): void;\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag: I): boolean;\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot?: DocumentOrShadowRoot | null): Observable<Event>;\n    ngOnDestroy(): void;\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    private _preventDefaultWhileDragging;\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    private _persistentTouchmoveListener;\n    /** Clears out the global event listeners from the `document`. */\n    private _clearGlobalListeners;\n}\n"]}
=======
{"version":3,"file":"drag-drop-registry.d.ts","sources":["drag-drop-registry.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { NgZone, OnDestroy } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n/**\r\n * Service that keeps track of all the drag item and drop container\r\n * instances, and manages global event listeners on the `document`.\r\n * @docs-private\r\n */\r\nexport declare class DragDropRegistry<I extends {\r\n    isDragging(): boolean;\r\n}, C> implements OnDestroy {\r\n    private _ngZone;\r\n    private _document;\r\n    /** Registered drop container instances. */\r\n    private _dropInstances;\r\n    /** Registered drag item instances. */\r\n    private _dragInstances;\r\n    /** Drag item instances that are currently being dragged. */\r\n    private _activeDragInstances;\r\n    /** Keeps track of the event listeners that we've bound to the `document`. */\r\n    private _globalListeners;\r\n    /**\r\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\r\n     * because it'll be called a lot and we don't want to create a new function every time.\r\n     */\r\n    private _draggingPredicate;\r\n    /**\r\n     * Emits the `touchmove` or `mousemove` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     */\r\n    readonly pointerMove: Subject<TouchEvent | MouseEvent>;\r\n    /**\r\n     * Emits the `touchend` or `mouseup` events that are dispatched\r\n     * while the user is dragging a drag item instance.\r\n     */\r\n    readonly pointerUp: Subject<TouchEvent | MouseEvent>;\r\n    /**\r\n     * Emits when the viewport has been scrolled while the user is dragging an item.\r\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\r\n     * @breaking-change 13.0.0\r\n     */\r\n    readonly scroll: Subject<Event>;\r\n    constructor(_ngZone: NgZone, _document: any);\r\n    /** Adds a drop container to the registry. */\r\n    registerDropContainer(drop: C): void;\r\n    /** Adds a drag item instance to the registry. */\r\n    registerDragItem(drag: I): void;\r\n    /** Removes a drop container from the registry. */\r\n    removeDropContainer(drop: C): void;\r\n    /** Removes a drag item instance from the registry. */\r\n    removeDragItem(drag: I): void;\r\n    /**\r\n     * Starts the dragging sequence for a drag instance.\r\n     * @param drag Drag instance which is being dragged.\r\n     * @param event Event that initiated the dragging.\r\n     */\r\n    startDragging(drag: I, event: TouchEvent | MouseEvent): void;\r\n    /** Stops dragging a drag item instance. */\r\n    stopDragging(drag: I): void;\r\n    /** Gets whether a drag item instance is currently being dragged. */\r\n    isDragging(drag: I): boolean;\r\n    /**\r\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\r\n     * dragged.\r\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\r\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\r\n     *   be used to include an additional top-level listener at the shadow root level.\r\n     */\r\n    scrolled(shadowRoot?: DocumentOrShadowRoot | null): Observable<Event>;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Event listener that will prevent the default browser action while the user is dragging.\r\n     * @param event Event whose default action should be prevented.\r\n     */\r\n    private _preventDefaultWhileDragging;\r\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\r\n    private _persistentTouchmoveListener;\r\n    /** Clears out the global event listeners from the `document`. */\r\n    private _clearGlobalListeners;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
