<<<<<<< HEAD
{"version":3,"file":"unique-selection-dispatcher.d.ts","sources":["unique-selection-dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy } from '@angular/core';\nexport declare type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\n/**\n * Class to coordinate unique selection based on name.\n * Intended to be consumed as an Angular service.\n * This service is needed because native radio change events are only fired on the item currently\n * being selected, and we still need to uncheck the previous selection.\n *\n * This service does not *store* any IDs and names because they may change at any time, so it is\n * less error-prone if they are simply passed through when the events occur.\n */\nexport declare class UniqueSelectionDispatcher implements OnDestroy {\n    private _listeners;\n    /**\n     * Notify other items that selection for the given name has been set.\n     * @param id ID of the item.\n     * @param name Name of the item.\n     */\n    notify(id: string, name: string): void;\n    /**\n     * Listen for future changes to item selection.\n     * @return Function used to deregister listener\n     */\n    listen(listener: UniqueSelectionDispatcherListener): () => void;\n    ngOnDestroy(): void;\n}\n"]}
=======
{"version":3,"file":"unique-selection-dispatcher.d.ts","sources":["unique-selection-dispatcher.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { OnDestroy } from '@angular/core';\r\nexport declare type UniqueSelectionDispatcherListener = (id: string, name: string) => void;\r\n/**\r\n * Class to coordinate unique selection based on name.\r\n * Intended to be consumed as an Angular service.\r\n * This service is needed because native radio change events are only fired on the item currently\r\n * being selected, and we still need to uncheck the previous selection.\r\n *\r\n * This service does not *store* any IDs and names because they may change at any time, so it is\r\n * less error-prone if they are simply passed through when the events occur.\r\n */\r\nexport declare class UniqueSelectionDispatcher implements OnDestroy {\r\n    private _listeners;\r\n    /**\r\n     * Notify other items that selection for the given name has been set.\r\n     * @param id ID of the item.\r\n     * @param name Name of the item.\r\n     */\r\n    notify(id: string, name: string): void;\r\n    /**\r\n     * Listen for future changes to item selection.\r\n     * @return Function used to deregister listener\r\n     */\r\n    listen(listener: UniqueSelectionDispatcherListener): () => void;\r\n    ngOnDestroy(): void;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
