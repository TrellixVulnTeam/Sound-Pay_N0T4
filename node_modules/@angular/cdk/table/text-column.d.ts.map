<<<<<<< HEAD
{"version":3,"file":"text-column.d.ts","sources":["text-column.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport { OnDestroy, OnInit } from '@angular/core';\nimport { CdkCellDef, CdkColumnDef, CdkHeaderCellDef } from './cell';\nimport { CdkTable } from './table';\nimport { TextColumnOptions } from './tokens';\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nexport declare class CdkTextColumn<T> implements OnDestroy, OnInit {\n    private _table;\n    private _options;\n    /** Column name that should be used to reference this column. */\n    get name(): string;\n    set name(name: string);\n    _name: string;\n    /**\n     * Text label that should be used for the column header. If this property is not\n     * set, the header text will default to the column name with its first letter capitalized.\n     */\n    headerText: string;\n    /**\n     * Accessor function to retrieve the data rendered for each cell. If this\n     * property is not set, the data cells will render the value found in the data's property matching\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\n     * value defined by the data's `id` property.\n     */\n    dataAccessor: (data: T, name: string) => string;\n    /** Alignment of the cell values. */\n    justify: 'start' | 'end';\n    /** @docs-private */\n    columnDef: CdkColumnDef;\n    /**\n     * The column cell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    cell: CdkCellDef;\n    /**\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\n     * column definition was provided in the same view as the table, which is not the case with this\n     * component.\n     * @docs-private\n     */\n    headerCell: CdkHeaderCellDef;\n    constructor(_table: CdkTable<T>, _options: TextColumnOptions<T>);\n    ngOnInit(): void;\n    ngOnDestroy(): void;\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText(): string;\n    /** Synchronizes the column definition name with the text column name. */\n    private _syncColumnDefName;\n}\n"]}
=======
{"version":3,"file":"text-column.d.ts","sources":["text-column.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { OnDestroy, OnInit } from '@angular/core';\r\nimport { CdkCellDef, CdkColumnDef, CdkHeaderCellDef } from './cell';\r\nimport { CdkTable } from './table';\r\nimport { TextColumnOptions } from './tokens';\r\n/**\r\n * Column that simply shows text content for the header and row cells. Assumes that the table\r\n * is using the native table implementation (`<table>`).\r\n *\r\n * By default, the name of this column will be the header text and data property accessor.\r\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\r\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\r\n * input.\r\n */\r\nexport declare class CdkTextColumn<T> implements OnDestroy, OnInit {\r\n    private _table;\r\n    private _options;\r\n    /** Column name that should be used to reference this column. */\r\n    get name(): string;\r\n    set name(name: string);\r\n    _name: string;\r\n    /**\r\n     * Text label that should be used for the column header. If this property is not\r\n     * set, the header text will default to the column name with its first letter capitalized.\r\n     */\r\n    headerText: string;\r\n    /**\r\n     * Accessor function to retrieve the data rendered for each cell. If this\r\n     * property is not set, the data cells will render the value found in the data's property matching\r\n     * the column's name. For example, if the column is named `id`, then the rendered value will be\r\n     * value defined by the data's `id` property.\r\n     */\r\n    dataAccessor: (data: T, name: string) => string;\r\n    /** Alignment of the cell values. */\r\n    justify: 'start' | 'end';\r\n    /** @docs-private */\r\n    columnDef: CdkColumnDef;\r\n    /**\r\n     * The column cell is provided to the column during `ngOnInit` with a static query.\r\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\r\n     * column definition was provided in the same view as the table, which is not the case with this\r\n     * component.\r\n     * @docs-private\r\n     */\r\n    cell: CdkCellDef;\r\n    /**\r\n     * The column headerCell is provided to the column during `ngOnInit` with a static query.\r\n     * Normally, this will be retrieved by the column using `ContentChild`, but that assumes the\r\n     * column definition was provided in the same view as the table, which is not the case with this\r\n     * component.\r\n     * @docs-private\r\n     */\r\n    headerCell: CdkHeaderCellDef;\r\n    constructor(_table: CdkTable<T>, _options: TextColumnOptions<T>);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Creates a default header text. Use the options' header text transformation function if one\r\n     * has been provided. Otherwise simply capitalize the column name.\r\n     */\r\n    _createDefaultHeaderText(): string;\r\n    /** Synchronizes the column definition name with the text column name. */\r\n    private _syncColumnDefName;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
