<<<<<<< HEAD
{"version":3,"file":"observers.js","sources":["../../../../../../src/cdk/observers/observe-content.ts","../../../../../../src/cdk/observers/public-api.ts","../../../../../../src/cdk/observers/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    readonly stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: NumberInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}
=======
{"version":3,"file":"observers.js","sources":["../../../../../../src/cdk/observers/observe-content.ts","../../../../../../src/cdk/observers/public-api.ts","../../../../../../src/cdk/observers/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  coerceBooleanProperty,\n  coerceNumberProperty,\n  coerceElement,\n  BooleanInput,\n  NumberInput\n} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Injectable,\n  Input,\n  NgModule,\n  NgZone,\n  OnDestroy,\n  Output,\n} from '@angular/core';\nimport {Observable, Subject, Subscription, Observer} from 'rxjs';\nimport {debounceTime} from 'rxjs/operators';\n\n/**\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\n * @docs-private\n */\n@Injectable({providedIn: 'root'})\nexport class MutationObserverFactory {\n  create(callback: MutationCallback): MutationObserver | null {\n    return typeof MutationObserver === 'undefined' ? null : new MutationObserver(callback);\n  }\n}\n\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({providedIn: 'root'})\nexport class ContentObserver implements OnDestroy {\n  /** Keeps track of the existing MutationObservers so they can be reused. */\n  private _observedElements = new Map<Element, {\n    observer: MutationObserver | null,\n    readonly stream: Subject<MutationRecord[]>,\n    count: number\n  }>();\n\n  constructor(private _mutationObserverFactory: MutationObserverFactory) {}\n\n  ngOnDestroy() {\n    this._observedElements.forEach((_, element) => this._cleanupObserver(element));\n  }\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: Element): Observable<MutationRecord[]>;\n\n  /**\n   * Observe content changes on an element.\n   * @param element The element to observe for content changes.\n   */\n  observe(element: ElementRef<Element>): Observable<MutationRecord[]>;\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<MutationRecord[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<MutationRecord[]>) => {\n      const stream = this._observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this._unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing MutationObserver if available, or creating a\n   * new one if not.\n   */\n  private _observeElement(element: Element): Subject<MutationRecord[]> {\n    if (!this._observedElements.has(element)) {\n      const stream = new Subject<MutationRecord[]>();\n      const observer = this._mutationObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element, {\n          characterData: true,\n          childList: true,\n          subtree: true\n        });\n      }\n      this._observedElements.set(element, {observer, stream, count: 1});\n    } else {\n      this._observedElements.get(element)!.count++;\n    }\n    return this._observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is\n   * observing this element.\n   */\n  private _unobserveElement(element: Element) {\n    if (this._observedElements.has(element)) {\n      this._observedElements.get(element)!.count--;\n      if (!this._observedElements.get(element)!.count) {\n        this._cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying MutationObserver for the specified element. */\n  private _cleanupObserver(element: Element) {\n    if (this._observedElements.has(element)) {\n      const {observer, stream} = this._observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this._observedElements.delete(element);\n    }\n  }\n}\n\n\n/**\n * Directive that triggers a callback whenever the content of\n * its associated element has changed.\n */\n@Directive({\n  selector: '[cdkObserveContent]',\n  exportAs: 'cdkObserveContent',\n})\nexport class CdkObserveContent implements AfterContentInit, OnDestroy {\n  /** Event emitted for each change in the element's content. */\n  @Output('cdkObserveContent') readonly event = new EventEmitter<MutationRecord[]>();\n\n  /**\n   * Whether observing content is disabled. This option can be used\n   * to disconnect the underlying MutationObserver until it is needed.\n   */\n  @Input('cdkObserveContentDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    this._disabled = coerceBooleanProperty(value);\n    this._disabled ? this._unsubscribe() : this._subscribe();\n  }\n  private _disabled = false;\n\n  /** Debounce interval for emitting the changes. */\n  @Input()\n  get debounce(): number { return this._debounce; }\n  set debounce(value: number) {\n    this._debounce = coerceNumberProperty(value);\n    this._subscribe();\n  }\n  private _debounce: number;\n\n  private _currentSubscription: Subscription | null = null;\n\n  constructor(private _contentObserver: ContentObserver,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _ngZone: NgZone) {}\n\n  ngAfterContentInit() {\n    if (!this._currentSubscription && !this.disabled) {\n      this._subscribe();\n    }\n  }\n\n  ngOnDestroy() {\n    this._unsubscribe();\n  }\n\n  private _subscribe() {\n    this._unsubscribe();\n    const stream = this._contentObserver.observe(this._elementRef);\n\n    // TODO(mmalerba): We shouldn't be emitting on this @Output() outside the zone.\n    // Consider brining it back inside the zone next time we're making breaking changes.\n    // Bringing it back inside can cause things like infinite change detection loops and changed\n    // after checked errors if people's code isn't handling it properly.\n    this._ngZone.runOutsideAngular(() => {\n      this._currentSubscription =\n          (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);\n    });\n  }\n\n  private _unsubscribe() {\n    this._currentSubscription?.unsubscribe();\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_debounce: NumberInput;\n}\n\n\n@NgModule({\n  exports: [CdkObserveContent],\n  declarations: [CdkObserveContent],\n  providers: [MutationObserverFactory]\n})\nexport class ObserversModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './observe-content';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
