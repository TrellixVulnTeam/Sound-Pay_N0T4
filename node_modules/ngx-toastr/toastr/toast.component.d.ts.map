<<<<<<< HEAD
{"version":3,"file":"toast.component.d.ts","sources":["toast.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone, OnDestroy } from '@angular/core';\nimport { IndividualConfig, ToastPackage } from './toastr-config';\nimport { ToastrService } from './toastr.service';\nexport declare class Toast implements OnDestroy {\n    protected toastrService: ToastrService;\n    toastPackage: ToastPackage;\n    protected ngZone?: NgZone;\n    message?: string | null;\n    title?: string;\n    options: IndividualConfig;\n    duplicatesCount: number;\n    originalTimeout: number;\n    /** width of progress bar */\n    width: number;\n    /** a combination of toast type and options.toastClass */\n    toastClasses: string;\n    /** controls animation */\n    state: {\n        value: string;\n        params: {\n            easeTime: string | number;\n            easing: string;\n        };\n    };\n    /** hides component when waiting to be displayed */\n    get displayStyle(): string | undefined;\n    private timeout;\n    private intervalId;\n    private hideTime;\n    private sub;\n    private sub1;\n    private sub2;\n    private sub3;\n    constructor(toastrService: ToastrService, toastPackage: ToastPackage, ngZone?: NgZone);\n    ngOnDestroy(): void;\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast(): void;\n    /**\n     * updates progress bar width\n     */\n    updateProgress(): void;\n    resetTimeout(): void;\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove(): void;\n    tapToast(): void;\n    stickAround(): void;\n    delayedHideToast(): void;\n    outsideTimeout(func: () => any, timeout: number): void;\n    outsideInterval(func: () => any, timeout: number): void;\n    private runInsideAngular;\n}\n"]}
=======
{"version":3,"file":"toast.component.d.ts","sources":["toast.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { NgZone, OnDestroy } from '@angular/core';\r\nimport { IndividualConfig, ToastPackage } from './toastr-config';\r\nimport { ToastrService } from './toastr.service';\r\nexport declare class Toast implements OnDestroy {\r\n    protected toastrService: ToastrService;\r\n    toastPackage: ToastPackage;\r\n    protected ngZone?: NgZone;\r\n    message?: string | null;\r\n    title?: string;\r\n    options: IndividualConfig;\r\n    duplicatesCount: number;\r\n    originalTimeout: number;\r\n    /** width of progress bar */\r\n    width: number;\r\n    /** a combination of toast type and options.toastClass */\r\n    toastClasses: string;\r\n    /** controls animation */\r\n    state: {\r\n        value: string;\r\n        params: {\r\n            easeTime: string | number;\r\n            easing: string;\r\n        };\r\n    };\r\n    /** hides component when waiting to be displayed */\r\n    get displayStyle(): string | undefined;\r\n    private timeout;\r\n    private intervalId;\r\n    private hideTime;\r\n    private sub;\r\n    private sub1;\r\n    private sub2;\r\n    private sub3;\r\n    constructor(toastrService: ToastrService, toastPackage: ToastPackage, ngZone?: NgZone);\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * activates toast and sets timeout\r\n     */\r\n    activateToast(): void;\r\n    /**\r\n     * updates progress bar width\r\n     */\r\n    updateProgress(): void;\r\n    resetTimeout(): void;\r\n    /**\r\n     * tells toastrService to remove this toast after animation time\r\n     */\r\n    remove(): void;\r\n    tapToast(): void;\r\n    stickAround(): void;\r\n    delayedHideToast(): void;\r\n    outsideTimeout(func: () => any, timeout: number): void;\r\n    outsideInterval(func: () => any, timeout: number): void;\r\n    private runInsideAngular;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
