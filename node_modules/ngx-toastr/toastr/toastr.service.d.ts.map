<<<<<<< HEAD
{"version":3,"file":"toastr.service.d.ts","sources":["toastr.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ComponentRef, Injector, NgZone } from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Observable } from 'rxjs';\nimport { Overlay } from '../overlay/overlay';\nimport { ToastRef } from './toast-injector';\nimport { ToastContainerDirective } from './toast.directive';\nimport { GlobalConfig, IndividualConfig, ToastToken } from './toastr-config';\nexport interface ActiveToast<C> {\n    /** Your Toast ID. Use this to close it individually */\n    toastId: number;\n    /** the title of your toast. Stored to prevent duplicates */\n    title: string;\n    /** the message of your toast. Stored to prevent duplicates */\n    message: string;\n    /** a reference to the component see portal.ts */\n    portal: ComponentRef<C>;\n    /** a reference to your toast */\n    toastRef: ToastRef<C>;\n    /** triggered when toast is active */\n    onShown: Observable<void>;\n    /** triggered when toast is destroyed */\n    onHidden: Observable<void>;\n    /** triggered on toast click */\n    onTap: Observable<void>;\n    /** available for your use in custom toast */\n    onAction: Observable<any>;\n}\nexport declare class ToastrService {\n    private overlay;\n    private _injector;\n    private sanitizer;\n    private ngZone;\n    toastrConfig: GlobalConfig;\n    currentlyActive: number;\n    toasts: ActiveToast<any>[];\n    overlayContainer?: ToastContainerDirective;\n    previousToastMessage: string | undefined;\n    private index;\n    constructor(token: ToastToken, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer, ngZone: NgZone);\n    /** show toast */\n    show(message?: string, title?: string, override?: Partial<IndividualConfig>, type?: string): ActiveToast<any>;\n    /** show successful toast */\n    success(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\n    /** show error toast */\n    error(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\n    /** show info toast */\n    info(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\n    /** show warning toast */\n    warning(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId?: number): void;\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId: number): boolean;\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title: string, message: string, resetOnDuplicate: boolean, countDuplicates: boolean): ActiveToast<any>;\n    /** create a clone of global config and apply individual settings */\n    private applyConfig;\n    /**\n     * Find toast object by id\n     */\n    private _findToast;\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    private _preBuildNotification;\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    private _buildNotification;\n}\n"]}
=======
{"version":3,"file":"toastr.service.d.ts","sources":["toastr.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["import { ComponentRef, Injector, NgZone } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { Observable } from 'rxjs';\r\nimport { Overlay } from '../overlay/overlay';\r\nimport { ToastRef } from './toast-injector';\r\nimport { ToastContainerDirective } from './toast.directive';\r\nimport { GlobalConfig, IndividualConfig, ToastToken } from './toastr-config';\r\nexport interface ActiveToast<C> {\r\n    /** Your Toast ID. Use this to close it individually */\r\n    toastId: number;\r\n    /** the title of your toast. Stored to prevent duplicates */\r\n    title: string;\r\n    /** the message of your toast. Stored to prevent duplicates */\r\n    message: string;\r\n    /** a reference to the component see portal.ts */\r\n    portal: ComponentRef<C>;\r\n    /** a reference to your toast */\r\n    toastRef: ToastRef<C>;\r\n    /** triggered when toast is active */\r\n    onShown: Observable<void>;\r\n    /** triggered when toast is destroyed */\r\n    onHidden: Observable<void>;\r\n    /** triggered on toast click */\r\n    onTap: Observable<void>;\r\n    /** available for your use in custom toast */\r\n    onAction: Observable<any>;\r\n}\r\nexport declare class ToastrService {\r\n    private overlay;\r\n    private _injector;\r\n    private sanitizer;\r\n    private ngZone;\r\n    toastrConfig: GlobalConfig;\r\n    currentlyActive: number;\r\n    toasts: ActiveToast<any>[];\r\n    overlayContainer?: ToastContainerDirective;\r\n    previousToastMessage: string | undefined;\r\n    private index;\r\n    constructor(token: ToastToken, overlay: Overlay, _injector: Injector, sanitizer: DomSanitizer, ngZone: NgZone);\r\n    /** show toast */\r\n    show(message?: string, title?: string, override?: Partial<IndividualConfig>, type?: string): ActiveToast<any>;\r\n    /** show successful toast */\r\n    success(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\r\n    /** show error toast */\r\n    error(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\r\n    /** show info toast */\r\n    info(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\r\n    /** show warning toast */\r\n    warning(message?: string, title?: string, override?: Partial<IndividualConfig>): ActiveToast<any>;\r\n    /**\r\n     * Remove all or a single toast by id\r\n     */\r\n    clear(toastId?: number): void;\r\n    /**\r\n     * Remove and destroy a single toast by id\r\n     */\r\n    remove(toastId: number): boolean;\r\n    /**\r\n     * Determines if toast message is already shown\r\n     */\r\n    findDuplicate(title: string, message: string, resetOnDuplicate: boolean, countDuplicates: boolean): ActiveToast<any>;\r\n    /** create a clone of global config and apply individual settings */\r\n    private applyConfig;\r\n    /**\r\n     * Find toast object by id\r\n     */\r\n    private _findToast;\r\n    /**\r\n     * Determines the need to run inside angular's zone then builds the toast\r\n     */\r\n    private _preBuildNotification;\r\n    /**\r\n     * Creates and attaches toast data to component\r\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\r\n     */\r\n    private _buildNotification;\r\n}\r\n"]}
>>>>>>> ea61c1251ad92ce8100055fde2f2ab58372d18d8
